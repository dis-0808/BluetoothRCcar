
F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005854  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aec  08005aec  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005aec  08005aec  00006aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af4  08005af4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af4  08005af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005afc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  08005b64  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005b64  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d725  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eac  00000000  00000000  000147bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00016670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  00017390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172a7  00000000  00000000  00017dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e867  00000000  00000000  0002f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090112  00000000  00000000  0003d8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd9f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004090  00000000  00000000  000cda34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d1ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059dc 	.word	0x080059dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080059dc 	.word	0x080059dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay>:
volatile uint16_t Distance = 0;

void HCSR05_Read(void);
void delay(uint16_t time);

void delay (uint16_t time) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay+0x14>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000084 	.word	0x20000084

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 ff25 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 fa15 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fb7d 	bl	8000cec <MX_GPIO_Init>
  MX_TIM1_Init();
 80005f2:	f000 fa79 	bl	8000ae8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005f6:	f000 fb4f 	bl	8000c98 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80005fa:	f000 fae9 	bl	8000bd0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);  // 讓 delay() 的計數器真的在跑
 80005fe:	48bd      	ldr	r0, [pc, #756]	@ (80008f4 <main+0x314>)
 8000600:	f001 ff98 	bl	8002534 <HAL_TIM_Base_Start>

  srand( (unsigned)HAL_GetTick() );
 8000604:	f000 ff7c 	bl	8001500 <HAL_GetTick>
 8000608:	4603      	mov	r3, r0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 f9dc 	bl	80049c8 <srand>


  /* 啟動 PWM：左=CH1(PA6)、右=CH2(PA7) */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000610:	2100      	movs	r1, #0
 8000612:	48b9      	ldr	r0, [pc, #740]	@ (80008f8 <main+0x318>)
 8000614:	f002 f838 	bl	8002688 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000618:	2104      	movs	r1, #4
 800061a:	48b7      	ldr	r0, [pc, #732]	@ (80008f8 <main+0x318>)
 800061c:	f002 f834 	bl	8002688 <HAL_TIM_PWM_Start>

  /* 取得 ARR，方便計算 duty */
  uint32_t PWM_MAX = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8000620:	4bb5      	ldr	r3, [pc, #724]	@ (80008f8 <main+0x318>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000626:	617b      	str	r3, [r7, #20]

  /* 給一個預設速度（70%） */
  uint32_t speed = (uint32_t)(PWM_MAX * 0.70f);
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000632:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 80008fc <main+0x31c>
 8000636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063e:	ee17 3a90 	vmov	r3, s15
 8000642:	613b      	str	r3, [r7, #16]

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	48ab      	ldr	r0, [pc, #684]	@ (80008f4 <main+0x314>)
 8000648:	f002 f928 	bl	800289c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	49ac      	ldr	r1, [pc, #688]	@ (8000900 <main+0x320>)
 8000650:	48ac      	ldr	r0, [pc, #688]	@ (8000904 <main+0x324>)
 8000652:	f003 fa81 	bl	8003b58 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (rx_flag) {
 8000656:	4bac      	ldr	r3, [pc, #688]	@ (8000908 <main+0x328>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	f000 81ae 	beq.w	80009bc <main+0x3dc>
	          uint8_t data = rx_data;  // 把剛收到的字元讀出
 8000660:	4ba7      	ldr	r3, [pc, #668]	@ (8000900 <main+0x320>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	73fb      	strb	r3, [r7, #15]
	          rx_flag = 0;             // 清除旗標
 8000666:	4ba8      	ldr	r3, [pc, #672]	@ (8000908 <main+0x328>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]

	          switch (data)
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3b61      	subs	r3, #97	@ 0x61
 8000670:	2b17      	cmp	r3, #23
 8000672:	f200 81a2 	bhi.w	80009ba <main+0x3da>
 8000676:	a201      	add	r2, pc, #4	@ (adr r2, 800067c <main+0x9c>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	08000761 	.word	0x08000761
 8000680:	080009bb 	.word	0x080009bb
 8000684:	080009bb 	.word	0x080009bb
 8000688:	080007a3 	.word	0x080007a3
 800068c:	080009bb 	.word	0x080009bb
 8000690:	080009bb 	.word	0x080009bb
 8000694:	080009bb 	.word	0x080009bb
 8000698:	080009bb 	.word	0x080009bb
 800069c:	080009bb 	.word	0x080009bb
 80006a0:	080009bb 	.word	0x080009bb
 80006a4:	080009bb 	.word	0x080009bb
 80006a8:	080009bb 	.word	0x080009bb
 80006ac:	080009bb 	.word	0x080009bb
 80006b0:	080009bb 	.word	0x080009bb
 80006b4:	080009bb 	.word	0x080009bb
 80006b8:	080009bb 	.word	0x080009bb
 80006bc:	080009bb 	.word	0x080009bb
 80006c0:	080009bb 	.word	0x080009bb
 80006c4:	0800071f 	.word	0x0800071f
 80006c8:	0800099d 	.word	0x0800099d
 80006cc:	080009bb 	.word	0x080009bb
 80006d0:	080009bb 	.word	0x080009bb
 80006d4:	080006dd 	.word	0x080006dd
 80006d8:	080007e5 	.word	0x080007e5
	          {
	            case 'w': // forward
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // IN1=1
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e2:	488a      	ldr	r0, [pc, #552]	@ (800090c <main+0x32c>)
 80006e4:	f001 fa64 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // IN2=0
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ee:	4887      	ldr	r0, [pc, #540]	@ (800090c <main+0x32c>)
 80006f0:	f001 fa5e 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // IN3=1
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006fa:	4884      	ldr	r0, [pc, #528]	@ (800090c <main+0x32c>)
 80006fc:	f001 fa58 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); // IN4=0
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000706:	4881      	ldr	r0, [pc, #516]	@ (800090c <main+0x32c>)
 8000708:	f001 fa52 	bl	8001bb0 <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);   // 左 ENA
 800070c:	4b7a      	ldr	r3, [pc, #488]	@ (80008f8 <main+0x318>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);   // 右 ENB
 8000714:	4b78      	ldr	r3, [pc, #480]	@ (80008f8 <main+0x318>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	639a      	str	r2, [r3, #56]	@ 0x38
	              break;
 800071c:	e14e      	b.n	80009bc <main+0x3dc>

	            case 's': // back
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000724:	4879      	ldr	r0, [pc, #484]	@ (800090c <main+0x32c>)
 8000726:	f001 fa43 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000730:	4876      	ldr	r0, [pc, #472]	@ (800090c <main+0x32c>)
 8000732:	f001 fa3d 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073c:	4873      	ldr	r0, [pc, #460]	@ (800090c <main+0x32c>)
 800073e:	f001 fa37 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000748:	4870      	ldr	r0, [pc, #448]	@ (800090c <main+0x32c>)
 800074a:	f001 fa31 	bl	8001bb0 <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 800074e:	4b6a      	ldr	r3, [pc, #424]	@ (80008f8 <main+0x318>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000756:	4b68      	ldr	r3, [pc, #416]	@ (80008f8 <main+0x318>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	639a      	str	r2, [r3, #56]	@ 0x38
	              break;
 800075e:	e12d      	b.n	80009bc <main+0x3dc>

	            case 'a': // left
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000766:	4869      	ldr	r0, [pc, #420]	@ (800090c <main+0x32c>)
 8000768:	f001 fa22 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000772:	4866      	ldr	r0, [pc, #408]	@ (800090c <main+0x32c>)
 8000774:	f001 fa1c 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800077e:	4863      	ldr	r0, [pc, #396]	@ (800090c <main+0x32c>)
 8000780:	f001 fa16 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800078a:	4860      	ldr	r0, [pc, #384]	@ (800090c <main+0x32c>)
 800078c:	f001 fa10 	bl	8001bb0 <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8000790:	4b59      	ldr	r3, [pc, #356]	@ (80008f8 <main+0x318>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	635a      	str	r2, [r3, #52]	@ 0x34
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000798:	4b57      	ldr	r3, [pc, #348]	@ (80008f8 <main+0x318>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	639a      	str	r2, [r3, #56]	@ 0x38
	              break;
 80007a0:	e10c      	b.n	80009bc <main+0x3dc>

	            case 'd': // right
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a8:	4858      	ldr	r0, [pc, #352]	@ (800090c <main+0x32c>)
 80007aa:	f001 fa01 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b4:	4855      	ldr	r0, [pc, #340]	@ (800090c <main+0x32c>)
 80007b6:	f001 f9fb 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c0:	4852      	ldr	r0, [pc, #328]	@ (800090c <main+0x32c>)
 80007c2:	f001 f9f5 	bl	8001bb0 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007cc:	484f      	ldr	r0, [pc, #316]	@ (800090c <main+0x32c>)
 80007ce:	f001 f9ef 	bl	8001bb0 <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 80007d2:	4b49      	ldr	r3, [pc, #292]	@ (80008f8 <main+0x318>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	635a      	str	r2, [r3, #52]	@ 0x34
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 80007da:	4b47      	ldr	r3, [pc, #284]	@ (80008f8 <main+0x318>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	639a      	str	r2, [r3, #56]	@ 0x38
	              break;
 80007e2:	e0eb      	b.n	80009bc <main+0x3dc>

	            case 'x': // 隨機 20 次
	              for (count = 0; count < 20; count++) {
 80007e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000910 <main+0x330>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e0c3      	b.n	8000974 <main+0x394>
	                int dir = (rand() % 4);
 80007ec:	f004 f91a 	bl	8004a24 <rand>
 80007f0:	4603      	mov	r3, r0
 80007f2:	425a      	negs	r2, r3
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	f002 0203 	and.w	r2, r2, #3
 80007fc:	bf58      	it	pl
 80007fe:	4253      	negpl	r3, r2
 8000800:	60bb      	str	r3, [r7, #8]
	                uint32_t rnd_speed = (uint32_t)((0.4f + 0.6f*((float)rand()/RAND_MAX)) * PWM_MAX);
 8000802:	f004 f90f 	bl	8004a24 <rand>
 8000806:	ee07 0a90 	vmov	s15, r0
 800080a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800080e:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8000914 <main+0x334>
 8000812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000816:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000918 <main+0x338>
 800081a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800081e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800091c <main+0x33c>
 8000822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	ee07 3a90 	vmov	s15, r3
 800082c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000838:	ee17 3a90 	vmov	r3, s15
 800083c:	607b      	str	r3, [r7, #4]

	                switch (dir) {
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	2b03      	cmp	r3, #3
 8000842:	f200 8086 	bhi.w	8000952 <main+0x372>
 8000846:	a201      	add	r2, pc, #4	@ (adr r2, 800084c <main+0x26c>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	0800085d 	.word	0x0800085d
 8000850:	0800088f 	.word	0x0800088f
 8000854:	080008c1 	.word	0x080008c1
 8000858:	08000921 	.word	0x08000921
	                  case 0: // forward
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000862:	482a      	ldr	r0, [pc, #168]	@ (800090c <main+0x32c>)
 8000864:	f001 f9a4 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086e:	4827      	ldr	r0, [pc, #156]	@ (800090c <main+0x32c>)
 8000870:	f001 f99e 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800087a:	4824      	ldr	r0, [pc, #144]	@ (800090c <main+0x32c>)
 800087c:	f001 f998 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000886:	4821      	ldr	r0, [pc, #132]	@ (800090c <main+0x32c>)
 8000888:	f001 f992 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    break;
 800088c:	e061      	b.n	8000952 <main+0x372>
	                  case 1: // back
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000894:	481d      	ldr	r0, [pc, #116]	@ (800090c <main+0x32c>)
 8000896:	f001 f98b 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a0:	481a      	ldr	r0, [pc, #104]	@ (800090c <main+0x32c>)
 80008a2:	f001 f985 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ac:	4817      	ldr	r0, [pc, #92]	@ (800090c <main+0x32c>)
 80008ae:	f001 f97f 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b8:	4814      	ldr	r0, [pc, #80]	@ (800090c <main+0x32c>)
 80008ba:	f001 f979 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    break;
 80008be:	e048      	b.n	8000952 <main+0x372>
	                  case 2: // left
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c6:	4811      	ldr	r0, [pc, #68]	@ (800090c <main+0x32c>)
 80008c8:	f001 f972 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d2:	480e      	ldr	r0, [pc, #56]	@ (800090c <main+0x32c>)
 80008d4:	f001 f96c 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <main+0x32c>)
 80008e0:	f001 f966 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ea:	4808      	ldr	r0, [pc, #32]	@ (800090c <main+0x32c>)
 80008ec:	f001 f960 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    break;
 80008f0:	e02f      	b.n	8000952 <main+0x372>
 80008f2:	bf00      	nop
 80008f4:	20000084 	.word	0x20000084
 80008f8:	200000cc 	.word	0x200000cc
 80008fc:	3f333333 	.word	0x3f333333
 8000900:	2000015c 	.word	0x2000015c
 8000904:	20000114 	.word	0x20000114
 8000908:	2000015d 	.word	0x2000015d
 800090c:	40020c00 	.word	0x40020c00
 8000910:	20000170 	.word	0x20000170
 8000914:	4f000000 	.word	0x4f000000
 8000918:	3f19999a 	.word	0x3f19999a
 800091c:	3ecccccd 	.word	0x3ecccccd
	                  case 3: // right
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000926:	4838      	ldr	r0, [pc, #224]	@ (8000a08 <main+0x428>)
 8000928:	f001 f942 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000932:	4835      	ldr	r0, [pc, #212]	@ (8000a08 <main+0x428>)
 8000934:	f001 f93c 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093e:	4832      	ldr	r0, [pc, #200]	@ (8000a08 <main+0x428>)
 8000940:	f001 f936 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800094a:	482f      	ldr	r0, [pc, #188]	@ (8000a08 <main+0x428>)
 800094c:	f001 f930 	bl	8001bb0 <HAL_GPIO_WritePin>
	                    break;
 8000950:	bf00      	nop
	                }

	                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, rnd_speed);
 8000952:	4b2e      	ldr	r3, [pc, #184]	@ (8000a0c <main+0x42c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
	                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, rnd_speed);
 800095a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <main+0x42c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38
	                HAL_Delay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000966:	f000 fdd7 	bl	8001518 <HAL_Delay>
	              for (count = 0; count < 20; count++) {
 800096a:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <main+0x430>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a27      	ldr	r2, [pc, #156]	@ (8000a10 <main+0x430>)
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <main+0x430>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b13      	cmp	r3, #19
 800097a:	f77f af37 	ble.w	80007ec <main+0x20c>
	              }
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800097e:	4b23      	ldr	r3, [pc, #140]	@ (8000a0c <main+0x42c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2200      	movs	r2, #0
 8000984:	635a      	str	r2, [r3, #52]	@ 0x34
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <main+0x42c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2200      	movs	r2, #0
 800098c:	639a      	str	r2, [r3, #56]	@ 0x38
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000994:	481c      	ldr	r0, [pc, #112]	@ (8000a08 <main+0x428>)
 8000996:	f001 f90b 	bl	8001bb0 <HAL_GPIO_WritePin>
	              break;
 800099a:	e00f      	b.n	80009bc <main+0x3dc>

	            case 't': // stop
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <main+0x42c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
	              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <main+0x42c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	639a      	str	r2, [r3, #56]	@ 0x38
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009b2:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <main+0x428>)
 80009b4:	f001 f8fc 	bl	8001bb0 <HAL_GPIO_WritePin>
	              break;
 80009b8:	e000      	b.n	80009bc <main+0x3dc>

	            default:
	              break;
 80009ba:	bf00      	nop
	          }
	      }

	  // 觸發一次超音波量測
	  HCSR05_Read();
 80009bc:	f000 fa00 	bl	8000dc0 <HCSR05_Read>

	  // 安全停車（<10cm）
	  if (Distance < 10) {
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <main+0x434>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	2b09      	cmp	r3, #9
 80009c8:	d814      	bhi.n	80009f4 <main+0x414>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);    // 警示燈
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009d0:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <main+0x428>)
 80009d2:	f001 f8ed 	bl	8001bb0 <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <main+0x42c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <main+0x42c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <main+0x428>)
 80009ee:	f001 f8df 	bl	8001bb0 <HAL_GPIO_WritePin>
 80009f2:	e005      	b.n	8000a00 <main+0x420>
	  } else {
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009fa:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <main+0x428>)
 80009fc:	f001 f8d8 	bl	8001bb0 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(20);
 8000a00:	2014      	movs	r0, #20
 8000a02:	f000 fd89 	bl	8001518 <HAL_Delay>
	  if (rx_flag) {
 8000a06:	e626      	b.n	8000656 <main+0x76>
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	200000cc 	.word	0x200000cc
 8000a10:	20000170 	.word	0x20000170
 8000a14:	2000016e 	.word	0x2000016e

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	@ 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	@ 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 f93f 	bl	8004caa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <SystemClock_Config+0xc8>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a26      	ldr	r2, [pc, #152]	@ (8000ae0 <SystemClock_Config+0xc8>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ae0 <SystemClock_Config+0xc8>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <SystemClock_Config+0xcc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <SystemClock_Config+0xcc>)
 8000a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <SystemClock_Config+0xcc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a8c:	2348      	movs	r3, #72	@ 0x48
 8000a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f8a1 	bl	8001be4 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa8:	f000 fa54 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fb03 	bl	80020d4 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ad4:	f000 fa3e 	bl	8000f54 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3750      	adds	r7, #80	@ 0x50
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b14:	4a2d      	ldr	r2, [pc, #180]	@ (8000bcc <MX_TIM1_Init+0xe4>)
 8000b16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b18:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b24:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b26      	ldr	r3, [pc, #152]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b32:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3e:	4822      	ldr	r0, [pc, #136]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b40:	f001 fca8 	bl	8002494 <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b4a:	f000 fa03 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481b      	ldr	r0, [pc, #108]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b5c:	f002 fa06 	bl	8002f6c <HAL_TIM_ConfigClockSource>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b66:	f000 f9f5 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b6a:	4817      	ldr	r0, [pc, #92]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b6c:	f001 fe3c 	bl	80027e8 <HAL_TIM_IC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b76:	f000 f9ed 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	4619      	mov	r1, r3
 8000b88:	480f      	ldr	r0, [pc, #60]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000b8a:	f002 ff13 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000b94:	f000 f9de 	bl	8000f54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <MX_TIM1_Init+0xe0>)
 8000bb0:	f002 f87e 	bl	8002cb0 <HAL_TIM_IC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000bba:	f000 f9cb 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000084 	.word	0x20000084
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf2:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000bf4:	4a27      	ldr	r2, [pc, #156]	@ (8000c94 <MX_TIM3_Init+0xc4>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3599;
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c06:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c18:	481d      	ldr	r0, [pc, #116]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c1a:	f001 fce5 	bl	80025e8 <HAL_TIM_PWM_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c24:	f000 f996 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4619      	mov	r1, r3
 8000c36:	4816      	ldr	r0, [pc, #88]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c38:	f002 febc 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c42:	f000 f987 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c46:	2360      	movs	r3, #96	@ 0x60
 8000c48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c5e:	f002 f8c3 	bl	8002de8 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c68:	f000 f974 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2204      	movs	r2, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4807      	ldr	r0, [pc, #28]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c74:	f002 f8b8 	bl	8002de8 <HAL_TIM_PWM_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c7e:	f000 f969 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c82:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <MX_TIM3_Init+0xc0>)
 8000c84:	f000 fa06 	bl	8001094 <HAL_TIM_MspPostInit>

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200000cc 	.word	0x200000cc
 8000c94:	40000400 	.word	0x40000400

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <MX_USART1_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	f002 fef2 	bl	8003ab8 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f000 f93b 	bl	8000f54 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
  /* 如果你之後要用中斷收資料，可以在這裡呼叫
       HAL_UART_Receive_IT(&huart1, &rx_data, 1); */
  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000114 	.word	0x20000114
 8000ce8:	40011000 	.word	0x40011000

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a23      	ldr	r2, [pc, #140]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d5c:	4816      	ldr	r0, [pc, #88]	@ (8000db8 <MX_GPIO_Init+0xcc>)
 8000d5e:	f000 ff27 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000d68:	4814      	ldr	r0, [pc, #80]	@ (8000dbc <MX_GPIO_Init+0xd0>)
 8000d6a:	f000 ff21 	bl	8001bb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <MX_GPIO_Init+0xcc>)
 8000d88:	f000 fd8e 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000d8c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d90:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_GPIO_Init+0xd0>)
 8000da6:	f000 fd7f 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* 如果你之後還要加按鍵/感測器，可以在這裡設定輸入腳位 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <HCSR05_Read>:

/* USER CODE BEGIN 4 */
void HCSR05_Read(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dca:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <HCSR05_Read+0x38>)
 8000dcc:	f000 fef0 	bl	8001bb0 <HAL_GPIO_WritePin>
  delay(10); // 10 µs trigger
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f7ff fbeb 	bl	80005ac <delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ddc:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <HCSR05_Read+0x38>)
 8000dde:	f000 fee7 	bl	8001bb0 <HAL_GPIO_WritePin>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HCSR05_Read+0x3c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <HCSR05_Read+0x3c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0202 	orr.w	r2, r2, #2
 8000df0:	60da      	str	r2, [r3, #12]
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	20000084 	.word	0x20000084

08000e00 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7f1b      	ldrb	r3, [r3, #28]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d170      	bne.n	8000ef2 <HAL_TIM_IC_CaptureCallback+0xf2>
    if (Is_First_Captured == 0) {
 8000e10:	4b3a      	ldr	r3, [pc, #232]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d11a      	bne.n	8000e50 <HAL_TIM_IC_CaptureCallback+0x50>
      IC_Val1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4838      	ldr	r0, [pc, #224]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000e1e:	f002 f96d 	bl	80030fc <HAL_TIM_ReadCapturedValue>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a37      	ldr	r2, [pc, #220]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000e26:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;
 8000e28:	4b34      	ldr	r3, [pc, #208]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e2e:	4b34      	ldr	r3, [pc, #208]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	4b32      	ldr	r3, [pc, #200]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 020a 	bic.w	r2, r2, #10
 8000e3c:	621a      	str	r2, [r3, #32]
 8000e3e:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6a1a      	ldr	r2, [r3, #32]
 8000e44:	4b2e      	ldr	r3, [pc, #184]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0202 	orr.w	r2, r2, #2
 8000e4c:	621a      	str	r2, [r3, #32]

      __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
    }
  }
}
 8000e4e:	e050      	b.n	8000ef2 <HAL_TIM_IC_CaptureCallback+0xf2>
      IC_Val2 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8000e50:	2100      	movs	r1, #0
 8000e52:	482b      	ldr	r0, [pc, #172]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000e54:	f002 f952 	bl	80030fc <HAL_TIM_ReadCapturedValue>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8000f08 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000e5c:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e5e:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	@ 0x24
      if (IC_Val2 >= IC_Val1) Difference = IC_Val2 - IC_Val1;
 8000e66:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d307      	bcc.n	8000e82 <HAL_TIM_IC_CaptureCallback+0x82>
 8000e72:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e009      	b.n	8000e96 <HAL_TIM_IC_CaptureCallback+0x96>
      else                    Difference = (65535 - IC_Val1) + IC_Val2;
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e90:	33ff      	adds	r3, #255	@ 0xff
 8000e92:	4a1e      	ldr	r2, [pc, #120]	@ (8000f0c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e94:	6013      	str	r3, [r2, #0]
      Distance = (uint16_t)(Difference * 0.0343f / 2.0f); // ≈ cm
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000f10 <HAL_TIM_IC_CaptureCallback+0x110>
 8000ea6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eaa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb6:	ee17 3a90 	vmov	r3, s15
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ebe:	801a      	strh	r2, [r3, #0]
      Is_First_Captured = 0;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a1a      	ldr	r2, [r3, #32]
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020a 	bic.w	r2, r2, #10
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a12      	ldr	r2, [r2, #32]
 8000ee0:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0202 	bic.w	r2, r2, #2
 8000ef0:	60da      	str	r2, [r3, #12]
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	20000084 	.word	0x20000084
 8000f04:	20000160 	.word	0x20000160
 8000f08:	20000164 	.word	0x20000164
 8000f0c:	20000168 	.word	0x20000168
 8000f10:	3d0c7e28 	.word	0x3d0c7e28
 8000f14:	2000016e 	.word	0x2000016e

08000f18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <HAL_UART_RxCpltCallback+0x2c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d107      	bne.n	8000f3a <HAL_UART_RxCpltCallback+0x22>
    rx_flag = 1;  // 通知主迴圈有新資料
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <HAL_UART_RxCpltCallback+0x30>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
    // 再次啟動接收下一個字元
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000f30:	2201      	movs	r2, #1
 8000f32:	4906      	ldr	r1, [pc, #24]	@ (8000f4c <HAL_UART_RxCpltCallback+0x34>)
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <HAL_UART_RxCpltCallback+0x38>)
 8000f36:	f002 fe0f 	bl	8003b58 <HAL_UART_Receive_IT>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40011000 	.word	0x40011000
 8000f48:	2000015d 	.word	0x2000015d
 8000f4c:	2000015c 	.word	0x2000015c
 8000f50:	20000114 	.word	0x20000114

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001044 <HAL_TIM_Base_MspInit+0x94>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d134      	bne.n	800103c <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_TIM_Base_MspInit+0x98>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800100a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4809      	ldr	r0, [pc, #36]	@ (800104c <HAL_TIM_Base_MspInit+0x9c>)
 8001028:	f000 fc3e 	bl	80018a8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	201b      	movs	r0, #27
 8001032:	f000 fb70 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001036:	201b      	movs	r0, #27
 8001038:	f000 fb89 	bl	800174e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	@ 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40010000 	.word	0x40010000
 8001048:	40023800 	.word	0x40023800
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <HAL_TIM_PWM_MspInit+0x3c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10d      	bne.n	800107e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_TIM_PWM_MspInit+0x40>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <HAL_TIM_PWM_MspInit+0x40>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <HAL_TIM_PWM_MspInit+0x40>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40000400 	.word	0x40000400
 8001090:	40023800 	.word	0x40023800

08001094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <HAL_TIM_MspPostInit+0x68>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d11d      	bne.n	80010f2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_TIM_MspPostInit+0x6c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_TIM_MspPostInit+0x6c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_TIM_MspPostInit+0x6c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d2:	23c0      	movs	r3, #192	@ 0xc0
 80010d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_TIM_MspPostInit+0x70>)
 80010ee:	f000 fbdb 	bl	80018a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000400 	.word	0x40000400
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <HAL_UART_MspInit+0x94>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d134      	bne.n	8001194 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <HAL_UART_MspInit+0x98>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <HAL_UART_MspInit+0x98>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_UART_MspInit+0x98>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_UART_MspInit+0x98>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <HAL_UART_MspInit+0x98>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_UART_MspInit+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001162:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001174:	2307      	movs	r3, #7
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <HAL_UART_MspInit+0x9c>)
 8001180:	f000 fb92 	bl	80018a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2025      	movs	r0, #37	@ 0x25
 800118a:	f000 fac4 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800118e:	2025      	movs	r0, #37	@ 0x25
 8001190:	f000 fadd 	bl	800174e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	@ 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40011000 	.word	0x40011000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <NMI_Handler+0x4>

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <MemManage_Handler+0x4>

080011c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <UsageFault_Handler+0x4>

080011d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fe:	f000 f96b 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <TIM1_CC_IRQHandler+0x10>)
 800120e:	f001 fc5f 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000084 	.word	0x20000084

0800121c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <USART1_IRQHandler+0x10>)
 8001222:	f002 fcbf 	bl	8003ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000114 	.word	0x20000114

08001230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_kill>:

int _kill(int pid, int sig)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800124a:	f003 fd7d 	bl	8004d48 <__errno>
 800124e:	4603      	mov	r3, r0
 8001250:	2216      	movs	r2, #22
 8001252:	601a      	str	r2, [r3, #0]
  return -1;
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_exit>:

void _exit (int status)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffe7 	bl	8001240 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001272:	bf00      	nop
 8001274:	e7fd      	b.n	8001272 <_exit+0x12>

08001276 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e00a      	b.n	800129e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001288:	f3af 8000 	nop.w
 800128c:	4601      	mov	r1, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dbf0      	blt.n	8001288 <_read+0x12>
  }

  return len;
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e009      	b.n	80012d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	60ba      	str	r2, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbf1      	blt.n	80012c2 <_write+0x12>
  }
  return len;
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_close>:

int _close(int file)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001310:	605a      	str	r2, [r3, #4]
  return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_isatty>:

int _isatty(int file)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f003 fce2 	bl	8004d48 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20020000 	.word	0x20020000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	20000174 	.word	0x20000174
 80013b8:	200002c8 	.word	0x200002c8

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001418 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e4:	f7ff ffea 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 fca1 	bl	8004d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff f8e5 	bl	80005e0 <main>
  bx  lr    
 8001416:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001424:	08005afc 	.word	0x08005afc
  ldr r2, =_sbss
 8001428:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800142c:	200002c8 	.word	0x200002c8

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <HAL_Init+0x40>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_Init+0x40>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <HAL_Init+0x40>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f94f 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	200f      	movs	r0, #15
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fd7a 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f967 	bl	800176a <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f92f 	bl	8001716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	@ (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000178 	.word	0x20000178

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000178 	.word	0x20000178

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	@ (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	@ (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	@ (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff3e 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff8e 	bl	8001654 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5d 	bl	8001600 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff31 	bl	80015c4 <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa2 	bl	80016bc <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff feb6 	bl	8001500 <HAL_GetTick>
 8001794:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d008      	beq.n	80017b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2280      	movs	r2, #128	@ 0x80
 80017a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e052      	b.n	800185a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0216 	bic.w	r2, r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <HAL_DMA_Abort+0x62>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0208 	bic.w	r2, r2, #8
 80017f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001804:	e013      	b.n	800182e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001806:	f7ff fe7b 	bl	8001500 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b05      	cmp	r3, #5
 8001812:	d90c      	bls.n	800182e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e015      	b.n	800185a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e4      	bne.n	8001806 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	223f      	movs	r2, #63	@ 0x3f
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d004      	beq.n	8001880 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00c      	b.n	800189a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2205      	movs	r2, #5
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e159      	b.n	8001b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8148 	bne.w	8001b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d005      	beq.n	80018fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d130      	bne.n	800195c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 0201 	and.w	r2, r3, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b03      	cmp	r3, #3
 8001966:	d017      	beq.n	8001998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d123      	bne.n	80019ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a2 	beq.w	8001b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b57      	ldr	r3, [pc, #348]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3e:	4b54      	ldr	r3, [pc, #336]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4a:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a49      	ldr	r2, [pc, #292]	@ (8001b98 <HAL_GPIO_Init+0x2f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x202>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a48      	ldr	r2, [pc, #288]	@ (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x1fe>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a47      	ldr	r2, [pc, #284]	@ (8001ba0 <HAL_GPIO_Init+0x2f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a46      	ldr	r2, [pc, #280]	@ (8001ba4 <HAL_GPIO_Init+0x2fc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x1f6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a45      	ldr	r2, [pc, #276]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x1f2>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a24      	ldr	r2, [pc, #144]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1a      	ldr	r2, [pc, #104]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f aea2 	bls.w	80018c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e267      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d075      	beq.n	8001cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c02:	4b88      	ldr	r3, [pc, #544]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d00c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0e:	4b85      	ldr	r3, [pc, #532]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d112      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b82      	ldr	r3, [pc, #520]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c26:	d10b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	4b7e      	ldr	r3, [pc, #504]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d05b      	beq.n	8001cec <HAL_RCC_OscConfig+0x108>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d157      	bne.n	8001cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e242      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c48:	d106      	bne.n	8001c58 <HAL_RCC_OscConfig+0x74>
 8001c4a:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xb0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b70      	ldr	r3, [pc, #448]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6f      	ldr	r2, [pc, #444]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6c      	ldr	r2, [pc, #432]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	4b69      	ldr	r3, [pc, #420]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a68      	ldr	r2, [pc, #416]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b66      	ldr	r3, [pc, #408]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a65      	ldr	r2, [pc, #404]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fc30 	bl	8001500 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fc2c 	bl	8001500 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	@ 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e207      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xc0>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fc1c 	bl	8001500 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fc18 	bl	8001500 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1f3      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b51      	ldr	r3, [pc, #324]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0xe8>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d06:	4b47      	ldr	r3, [pc, #284]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d12:	4b44      	ldr	r3, [pc, #272]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b41      	ldr	r3, [pc, #260]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x152>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1c7      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4937      	ldr	r1, [pc, #220]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e03a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b34      	ldr	r3, [pc, #208]	@ (8001e28 <HAL_RCC_OscConfig+0x244>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fbd1 	bl	8001500 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff fbcd 	bl	8001500 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e1a8      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b28      	ldr	r3, [pc, #160]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4925      	ldr	r1, [pc, #148]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_RCC_OscConfig+0x244>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fbb0 	bl	8001500 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fbac 	bl	8001500 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e187      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d036      	beq.n	8001e3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d016      	beq.n	8001e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_RCC_OscConfig+0x248>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fb90 	bl	8001500 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fb8c 	bl	8001500 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e167      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_RCC_OscConfig+0x240>)
 8001df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x200>
 8001e02:	e01b      	b.n	8001e3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e04:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_RCC_OscConfig+0x248>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb79 	bl	8001500 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	e00e      	b.n	8001e30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e12:	f7ff fb75 	bl	8001500 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d907      	bls.n	8001e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e150      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
 8001e24:	40023800 	.word	0x40023800
 8001e28:	42470000 	.word	0x42470000
 8001e2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ea      	bne.n	8001e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8097 	beq.w	8001f78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b81      	ldr	r3, [pc, #516]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a7c      	ldr	r2, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b77      	ldr	r3, [pc, #476]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b74      	ldr	r3, [pc, #464]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a73      	ldr	r2, [pc, #460]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb35 	bl	8001500 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff fb31 	bl	8001500 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e10c      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b6a      	ldr	r3, [pc, #424]	@ (8002058 <HAL_RCC_OscConfig+0x474>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x2ea>
 8001ec0:	4b64      	ldr	r3, [pc, #400]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec4:	4a63      	ldr	r2, [pc, #396]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x324>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x30c>
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	4a5e      	ldr	r2, [pc, #376]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0x324>
 8001ef0:	4b58      	ldr	r3, [pc, #352]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	4a57      	ldr	r2, [pc, #348]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efc:	4b55      	ldr	r3, [pc, #340]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a54      	ldr	r2, [pc, #336]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff faf6 	bl	8001500 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7ff faf2 	bl	8001500 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0cb      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	4b49      	ldr	r3, [pc, #292]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0ee      	beq.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fae0 	bl	8001500 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7ff fadc 	bl	8001500 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0b5      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1ee      	bne.n	8001f44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	4a38      	ldr	r2, [pc, #224]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a1 	beq.w	80020c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f82:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d05c      	beq.n	8002048 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d141      	bne.n	800201a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b31      	ldr	r3, [pc, #196]	@ (800205c <HAL_RCC_OscConfig+0x478>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fab0 	bl	8001500 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff faac 	bl	8001500 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e087      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	491b      	ldr	r1, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_RCC_OscConfig+0x478>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fa85 	bl	8001500 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7ff fa81 	bl	8001500 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e05c      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x416>
 8002018:	e054      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_RCC_OscConfig+0x478>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fa6e 	bl	8001500 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff fa6a 	bl	8001500 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e045      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_RCC_OscConfig+0x470>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
 8002046:	e03d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e038      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
 8002054:	40023800 	.word	0x40023800
 8002058:	40007000 	.word	0x40007000
 800205c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <HAL_RCC_OscConfig+0x4ec>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d028      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d121      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d11a      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002096:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002098:	4293      	cmp	r3, r2
 800209a:	d111      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	3b01      	subs	r3, #1
 80020aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cc      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b68      	ldr	r3, [pc, #416]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d90c      	bls.n	8002110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b65      	ldr	r3, [pc, #404]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b63      	ldr	r3, [pc, #396]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b8      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002128:	4b59      	ldr	r3, [pc, #356]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a58      	ldr	r2, [pc, #352]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002132:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002140:	4b53      	ldr	r3, [pc, #332]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a52      	ldr	r2, [pc, #328]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800214a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b50      	ldr	r3, [pc, #320]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	494d      	ldr	r1, [pc, #308]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d044      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d119      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d003      	beq.n	8002192 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b3f      	ldr	r3, [pc, #252]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e067      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4934      	ldr	r1, [pc, #208]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7ff f99c 	bl	8001500 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7ff f998 	bl	8001500 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e04f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d20c      	bcs.n	800221c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b22      	ldr	r3, [pc, #136]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e032      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4916      	ldr	r1, [pc, #88]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002246:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	490e      	ldr	r1, [pc, #56]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225a:	f000 f821 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800225e:	4602      	mov	r2, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	490a      	ldr	r1, [pc, #40]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	5ccb      	ldrb	r3, [r1, r3]
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f8fc 	bl	8001478 <HAL_InitTick>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00
 8002290:	40023800 	.word	0x40023800
 8002294:	080059f4 	.word	0x080059f4
 8002298:	20000000 	.word	0x20000000
 800229c:	20000004 	.word	0x20000004

080022a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022a4:	b090      	sub	sp, #64	@ 0x40
 80022a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d00d      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x40>
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	f200 80a1 	bhi.w	800240c <HAL_RCC_GetSysClockFreq+0x16c>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x3a>
 80022d2:	e09b      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d4:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x184>)
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022d8:	e09b      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022da:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x188>)
 80022dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022de:	e098      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d028      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	2200      	movs	r2, #0
 80022fe:	623b      	str	r3, [r7, #32]
 8002300:	627a      	str	r2, [r7, #36]	@ 0x24
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002308:	2100      	movs	r1, #0
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x188>)
 800230c:	fb03 f201 	mul.w	r2, r3, r1
 8002310:	2300      	movs	r3, #0
 8002312:	fb00 f303 	mul.w	r3, r0, r3
 8002316:	4413      	add	r3, r2
 8002318:	4a43      	ldr	r2, [pc, #268]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x188>)
 800231a:	fba0 1202 	umull	r1, r2, r0, r2
 800231e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002320:	460a      	mov	r2, r1
 8002322:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002326:	4413      	add	r3, r2
 8002328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800232a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232c:	2200      	movs	r2, #0
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	61fa      	str	r2, [r7, #28]
 8002332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800233a:	f7fd ffa1 	bl	8000280 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4613      	mov	r3, r2
 8002344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002346:	e053      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002348:	4b35      	ldr	r3, [pc, #212]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x180>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	2200      	movs	r2, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	617a      	str	r2, [r7, #20]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800235a:	f04f 0b00 	mov.w	fp, #0
 800235e:	4652      	mov	r2, sl
 8002360:	465b      	mov	r3, fp
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f04f 0100 	mov.w	r1, #0
 800236a:	0159      	lsls	r1, r3, #5
 800236c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002370:	0150      	lsls	r0, r2, #5
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	ebb2 080a 	subs.w	r8, r2, sl
 800237a:	eb63 090b 	sbc.w	r9, r3, fp
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800238a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800238e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002392:	ebb2 0408 	subs.w	r4, r2, r8
 8002396:	eb63 0509 	sbc.w	r5, r3, r9
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	00eb      	lsls	r3, r5, #3
 80023a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a8:	00e2      	lsls	r2, r4, #3
 80023aa:	4614      	mov	r4, r2
 80023ac:	461d      	mov	r5, r3
 80023ae:	eb14 030a 	adds.w	r3, r4, sl
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	eb45 030b 	adc.w	r3, r5, fp
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023c6:	4629      	mov	r1, r5
 80023c8:	028b      	lsls	r3, r1, #10
 80023ca:	4621      	mov	r1, r4
 80023cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d0:	4621      	mov	r1, r4
 80023d2:	028a      	lsls	r2, r1, #10
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023da:	2200      	movs	r2, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	60fa      	str	r2, [r7, #12]
 80023e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e4:	f7fd ff4c 	bl	8000280 <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4613      	mov	r3, r2
 80023ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x180>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x184>)
 800240e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002414:	4618      	mov	r0, r3
 8002416:	3740      	adds	r7, #64	@ 0x40
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	00f42400 	.word	0x00f42400
 8002428:	017d7840 	.word	0x017d7840

0800242c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000000 	.word	0x20000000

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a9b      	lsrs	r3, r3, #10
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4903      	ldr	r1, [pc, #12]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	08005a04 	.word	0x08005a04

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002470:	f7ff ffdc 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0b5b      	lsrs	r3, r3, #13
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	08005a04 	.word	0x08005a04

08002494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e041      	b.n	800252a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fd78 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3304      	adds	r3, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f000 fe7e 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e03c      	b.n	80025c6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <HAL_TIM_Base_Start+0xa0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d018      	beq.n	8002590 <HAL_TIM_Base_Start+0x5c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002566:	d013      	beq.n	8002590 <HAL_TIM_Base_Start+0x5c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1a      	ldr	r2, [pc, #104]	@ (80025d8 <HAL_TIM_Base_Start+0xa4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00e      	beq.n	8002590 <HAL_TIM_Base_Start+0x5c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a19      	ldr	r2, [pc, #100]	@ (80025dc <HAL_TIM_Base_Start+0xa8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d009      	beq.n	8002590 <HAL_TIM_Base_Start+0x5c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_TIM_Base_Start+0xac>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <HAL_TIM_Base_Start+0x5c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a16      	ldr	r2, [pc, #88]	@ (80025e4 <HAL_TIM_Base_Start+0xb0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d111      	bne.n	80025b4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d010      	beq.n	80025c4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b2:	e007      	b.n	80025c4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40000c00 	.word	0x40000c00
 80025e4:	40014000 	.word	0x40014000

080025e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e041      	b.n	800267e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe fd1e 	bl	8001050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f000 fdd4 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_TIM_PWM_Start+0x24>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e022      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d109      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x3e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e015      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x58>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e008      	b.n	80026f2 <HAL_TIM_PWM_Start+0x6a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e068      	b.n	80027cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_TIM_PWM_Start+0x82>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002708:	e013      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d104      	bne.n	800271a <HAL_TIM_PWM_Start+0x92>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002718:	e00b      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xa2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002728:	e003      	b.n	8002732 <HAL_TIM_PWM_Start+0xaa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f001 f914 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	@ (80027d4 <HAL_TIM_PWM_Start+0x14c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d107      	bne.n	800275a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002758:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <HAL_TIM_PWM_Start+0x14c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d018      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800276c:	d013      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a19      	ldr	r2, [pc, #100]	@ (80027d8 <HAL_TIM_PWM_Start+0x150>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <HAL_TIM_PWM_Start+0x154>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	@ (80027e0 <HAL_TIM_PWM_Start+0x158>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_PWM_Start+0x10e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <HAL_TIM_PWM_Start+0x15c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d010      	beq.n	80027ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	e007      	b.n	80027ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40014000 	.word	0x40014000

080027e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f839 	bl	8002886 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fcd4 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <HAL_TIM_IC_Start_IT+0x1e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e013      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x46>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d104      	bne.n	80028ca <HAL_TIM_IC_Start_IT+0x2e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e00b      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x46>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d104      	bne.n	80028da <HAL_TIM_IC_Start_IT+0x3e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	e003      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x46>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <HAL_TIM_IC_Start_IT+0x58>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e013      	b.n	800291c <HAL_TIM_IC_Start_IT+0x80>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d104      	bne.n	8002904 <HAL_TIM_IC_Start_IT+0x68>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e00b      	b.n	800291c <HAL_TIM_IC_Start_IT+0x80>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d104      	bne.n	8002914 <HAL_TIM_IC_Start_IT+0x78>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e003      	b.n	800291c <HAL_TIM_IC_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800291a:	b2db      	uxtb	r3, r3
 800291c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800291e:	7bbb      	ldrb	r3, [r7, #14]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002924:	7b7b      	ldrb	r3, [r7, #13]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0c2      	b.n	8002ab4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <HAL_TIM_IC_Start_IT+0xa2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800293c:	e013      	b.n	8002966 <HAL_TIM_IC_Start_IT+0xca>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d104      	bne.n	800294e <HAL_TIM_IC_Start_IT+0xb2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800294c:	e00b      	b.n	8002966 <HAL_TIM_IC_Start_IT+0xca>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d104      	bne.n	800295e <HAL_TIM_IC_Start_IT+0xc2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800295c:	e003      	b.n	8002966 <HAL_TIM_IC_Start_IT+0xca>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_TIM_IC_Start_IT+0xda>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002974:	e013      	b.n	800299e <HAL_TIM_IC_Start_IT+0x102>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d104      	bne.n	8002986 <HAL_TIM_IC_Start_IT+0xea>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002984:	e00b      	b.n	800299e <HAL_TIM_IC_Start_IT+0x102>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d104      	bne.n	8002996 <HAL_TIM_IC_Start_IT+0xfa>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002994:	e003      	b.n	800299e <HAL_TIM_IC_Start_IT+0x102>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d841      	bhi.n	8002a28 <HAL_TIM_IC_Start_IT+0x18c>
 80029a4:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <HAL_TIM_IC_Start_IT+0x110>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	08002a29 	.word	0x08002a29
 80029b4:	08002a29 	.word	0x08002a29
 80029b8:	08002a29 	.word	0x08002a29
 80029bc:	080029f3 	.word	0x080029f3
 80029c0:	08002a29 	.word	0x08002a29
 80029c4:	08002a29 	.word	0x08002a29
 80029c8:	08002a29 	.word	0x08002a29
 80029cc:	08002a05 	.word	0x08002a05
 80029d0:	08002a29 	.word	0x08002a29
 80029d4:	08002a29 	.word	0x08002a29
 80029d8:	08002a29 	.word	0x08002a29
 80029dc:	08002a17 	.word	0x08002a17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0202 	orr.w	r2, r2, #2
 80029ee:	60da      	str	r2, [r3, #12]
      break;
 80029f0:	e01d      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0204 	orr.w	r2, r2, #4
 8002a00:	60da      	str	r2, [r3, #12]
      break;
 8002a02:	e014      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	60da      	str	r2, [r3, #12]
      break;
 8002a14:	e00b      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0210 	orr.w	r2, r2, #16
 8002a24:	60da      	str	r2, [r3, #12]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d13e      	bne.n	8002ab2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 ff93 	bl	8003968 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_TIM_IC_Start_IT+0x220>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a54:	d013      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <HAL_TIM_IC_Start_IT+0x224>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <HAL_TIM_IC_Start_IT+0x228>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_IC_Start_IT+0x1e2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <HAL_TIM_IC_Start_IT+0x230>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d010      	beq.n	8002ab2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	40014000 	.word	0x40014000

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d020      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0202 	mvn.w	r2, #2
 8002b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f970 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fb38 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fb3f 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d020      	beq.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe f94a 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fb12 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fb19 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d020      	beq.n	8002bcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01b      	beq.n	8002bcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0208 	mvn.w	r2, #8
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe f924 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 faec 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 faf3 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d020      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0210 	mvn.w	r2, #16
 8002be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2208      	movs	r2, #8
 8002bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe f8fe 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fac6 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 facd 	bl	80031ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 faa4 	bl	8003184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 ff22 	bl	8003aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa9e 	bl	80031c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0220 	mvn.w	r2, #32
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fef4 	bl	8003a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_IC_ConfigChannel+0x1e>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e088      	b.n	8002de0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002cec:	f000 fc84 	bl	80035f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020c 	bic.w	r2, r2, #12
 8002cfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6999      	ldr	r1, [r3, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	619a      	str	r2, [r3, #24]
 8002d12:	e060      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d11c      	bne.n	8002d54 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002d2a:	f000 fcfc 	bl	8003726 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002d3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6999      	ldr	r1, [r3, #24]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	021a      	lsls	r2, r3, #8
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	619a      	str	r2, [r3, #24]
 8002d52:	e040      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11b      	bne.n	8002d92 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002d6a:	f000 fd49 	bl	8003800 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 020c 	bic.w	r2, r2, #12
 8002d7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69d9      	ldr	r1, [r3, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	61da      	str	r2, [r3, #28]
 8002d90:	e021      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d11c      	bne.n	8002dd2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002da8:	f000 fd66 	bl	8003878 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002dba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69d9      	ldr	r1, [r3, #28]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	61da      	str	r2, [r3, #28]
 8002dd0:	e001      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0ae      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	f200 809f 	bhi.w	8002f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002f55 	.word	0x08002f55
 8002e24:	08002f55 	.word	0x08002f55
 8002e28:	08002f55 	.word	0x08002f55
 8002e2c:	08002e91 	.word	0x08002e91
 8002e30:	08002f55 	.word	0x08002f55
 8002e34:	08002f55 	.word	0x08002f55
 8002e38:	08002f55 	.word	0x08002f55
 8002e3c:	08002ed3 	.word	0x08002ed3
 8002e40:	08002f55 	.word	0x08002f55
 8002e44:	08002f55 	.word	0x08002f55
 8002e48:	08002f55 	.word	0x08002f55
 8002e4c:	08002f13 	.word	0x08002f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fa42 	bl	80032e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0208 	orr.w	r2, r2, #8
 8002e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0204 	bic.w	r2, r2, #4
 8002e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6999      	ldr	r1, [r3, #24]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	619a      	str	r2, [r3, #24]
      break;
 8002e8e:	e064      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fa88 	bl	80033ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6999      	ldr	r1, [r3, #24]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	021a      	lsls	r2, r3, #8
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	619a      	str	r2, [r3, #24]
      break;
 8002ed0:	e043      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fad3 	bl	8003484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0208 	orr.w	r2, r2, #8
 8002eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0204 	bic.w	r2, r2, #4
 8002efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69d9      	ldr	r1, [r3, #28]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	61da      	str	r2, [r3, #28]
      break;
 8002f10:	e023      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fb1d 	bl	8003558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69d9      	ldr	r1, [r3, #28]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	021a      	lsls	r2, r3, #8
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	61da      	str	r2, [r3, #28]
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	75fb      	strb	r3, [r7, #23]
      break;
 8002f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIM_ConfigClockSource+0x1c>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0b4      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x186>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc0:	d03e      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0xd4>
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc6:	f200 8087 	bhi.w	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fce:	f000 8086 	beq.w	80030de <HAL_TIM_ConfigClockSource+0x172>
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd6:	d87f      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b70      	cmp	r3, #112	@ 0x70
 8002fda:	d01a      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0xa6>
 8002fdc:	2b70      	cmp	r3, #112	@ 0x70
 8002fde:	d87b      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b60      	cmp	r3, #96	@ 0x60
 8002fe2:	d050      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x11a>
 8002fe4:	2b60      	cmp	r3, #96	@ 0x60
 8002fe6:	d877      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b50      	cmp	r3, #80	@ 0x50
 8002fea:	d03c      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0xfa>
 8002fec:	2b50      	cmp	r3, #80	@ 0x50
 8002fee:	d873      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b40      	cmp	r3, #64	@ 0x40
 8002ff2:	d058      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x13a>
 8002ff4:	2b40      	cmp	r3, #64	@ 0x40
 8002ff6:	d86f      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b30      	cmp	r3, #48	@ 0x30
 8002ffa:	d064      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ffc:	2b30      	cmp	r3, #48	@ 0x30
 8002ffe:	d86b      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b20      	cmp	r3, #32
 8003002:	d060      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003004:	2b20      	cmp	r3, #32
 8003006:	d867      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05c      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x15a>
 800300c:	2b10      	cmp	r3, #16
 800300e:	d05a      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003010:	e062      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003022:	f000 fc81 	bl	8003928 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	609a      	str	r2, [r3, #8]
      break;
 800303e:	e04f      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003050:	f000 fc6a 	bl	8003928 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003062:	609a      	str	r2, [r3, #8]
      break;
 8003064:	e03c      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003072:	461a      	mov	r2, r3
 8003074:	f000 fb28 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2150      	movs	r1, #80	@ 0x50
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fc37 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003084:	e02c      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003092:	461a      	mov	r2, r3
 8003094:	f000 fb84 	bl	80037a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2160      	movs	r1, #96	@ 0x60
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fc27 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80030a4:	e01c      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 fb08 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2140      	movs	r1, #64	@ 0x40
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fc17 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e00c      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f000 fc0e 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80030d6:	e003      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e000      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d831      	bhi.n	8003174 <HAL_TIM_ReadCapturedValue+0x78>
 8003110:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003175 	.word	0x08003175
 8003120:	08003175 	.word	0x08003175
 8003124:	08003175 	.word	0x08003175
 8003128:	08003157 	.word	0x08003157
 800312c:	08003175 	.word	0x08003175
 8003130:	08003175 	.word	0x08003175
 8003134:	08003175 	.word	0x08003175
 8003138:	08003161 	.word	0x08003161
 800313c:	08003175 	.word	0x08003175
 8003140:	08003175 	.word	0x08003175
 8003144:	08003175 	.word	0x08003175
 8003148:	0800316b 	.word	0x0800316b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003152:	60fb      	str	r3, [r7, #12]

      break;
 8003154:	e00f      	b.n	8003176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	60fb      	str	r3, [r7, #12]

      break;
 800315e:	e00a      	b.n	8003176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003166:	60fb      	str	r3, [r7, #12]

      break;
 8003168:	e005      	b.n	8003176 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	60fb      	str	r3, [r7, #12]

      break;
 8003172:	e000      	b.n	8003176 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003174:	bf00      	nop
  }

  return tmpreg;
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a37      	ldr	r2, [pc, #220]	@ (80032c4 <TIM_Base_SetConfig+0xf0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00f      	beq.n	800320c <TIM_Base_SetConfig+0x38>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d00b      	beq.n	800320c <TIM_Base_SetConfig+0x38>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a34      	ldr	r2, [pc, #208]	@ (80032c8 <TIM_Base_SetConfig+0xf4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <TIM_Base_SetConfig+0x38>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a33      	ldr	r2, [pc, #204]	@ (80032cc <TIM_Base_SetConfig+0xf8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_Base_SetConfig+0x38>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a32      	ldr	r2, [pc, #200]	@ (80032d0 <TIM_Base_SetConfig+0xfc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d108      	bne.n	800321e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a28      	ldr	r2, [pc, #160]	@ (80032c4 <TIM_Base_SetConfig+0xf0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01b      	beq.n	800325e <TIM_Base_SetConfig+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322c:	d017      	beq.n	800325e <TIM_Base_SetConfig+0x8a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a25      	ldr	r2, [pc, #148]	@ (80032c8 <TIM_Base_SetConfig+0xf4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <TIM_Base_SetConfig+0x8a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a24      	ldr	r2, [pc, #144]	@ (80032cc <TIM_Base_SetConfig+0xf8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00f      	beq.n	800325e <TIM_Base_SetConfig+0x8a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <TIM_Base_SetConfig+0xfc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00b      	beq.n	800325e <TIM_Base_SetConfig+0x8a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a22      	ldr	r2, [pc, #136]	@ (80032d4 <TIM_Base_SetConfig+0x100>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <TIM_Base_SetConfig+0x8a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a21      	ldr	r2, [pc, #132]	@ (80032d8 <TIM_Base_SetConfig+0x104>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <TIM_Base_SetConfig+0x8a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a20      	ldr	r2, [pc, #128]	@ (80032dc <TIM_Base_SetConfig+0x108>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d108      	bne.n	8003270 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <TIM_Base_SetConfig+0xf0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d103      	bne.n	800329e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800
 80032d0:	40000c00 	.word	0x40000c00
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40014400 	.word	0x40014400
 80032dc:	40014800 	.word	0x40014800

080032e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f023 0201 	bic.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 0302 	bic.w	r3, r3, #2
 8003328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1c      	ldr	r2, [pc, #112]	@ (80033a8 <TIM_OC1_SetConfig+0xc8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d10c      	bne.n	8003356 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0308 	bic.w	r3, r3, #8
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <TIM_OC1_SetConfig+0xc8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40010000 	.word	0x40010000

080033ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f023 0210 	bic.w	r2, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0320 	bic.w	r3, r3, #32
 80033f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1e      	ldr	r2, [pc, #120]	@ (8003480 <TIM_OC2_SetConfig+0xd4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10d      	bne.n	8003428 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a15      	ldr	r2, [pc, #84]	@ (8003480 <TIM_OC2_SetConfig+0xd4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d113      	bne.n	8003458 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000

08003484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003554 <TIM_OC3_SetConfig+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <TIM_OC3_SetConfig+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d113      	bne.n	800352e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800350c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40010000 	.word	0x40010000

08003558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a10      	ldr	r2, [pc, #64]	@ (80035f4 <TIM_OC4_SetConfig+0x9c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d109      	bne.n	80035cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000

080035f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f023 0201 	bic.w	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a24      	ldr	r2, [pc, #144]	@ (80036b4 <TIM_TI1_SetConfig+0xbc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d00f      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a21      	ldr	r2, [pc, #132]	@ (80036b8 <TIM_TI1_SetConfig+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a20      	ldr	r2, [pc, #128]	@ (80036bc <TIM_TI1_SetConfig+0xc4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a1f      	ldr	r2, [pc, #124]	@ (80036c0 <TIM_TI1_SetConfig+0xc8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a1e      	ldr	r2, [pc, #120]	@ (80036c4 <TIM_TI1_SetConfig+0xcc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <TIM_TI1_SetConfig+0x5a>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <TIM_TI1_SetConfig+0x5c>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e003      	b.n	8003672 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	b2db      	uxtb	r3, r3
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f023 030a 	bic.w	r3, r3, #10
 800368c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 030a 	and.w	r3, r3, #10
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000

080036c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 030a 	bic.w	r3, r3, #10
 8003704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b087      	sub	sp, #28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0210 	bic.w	r2, r3, #16
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	031b      	lsls	r3, r3, #12
 800376a:	b29b      	uxth	r3, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003778:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	031b      	lsls	r3, r3, #12
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f023 0303 	bic.w	r3, r3, #3
 800382c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800383c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	b2db      	uxtb	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003850:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	031b      	lsls	r3, r3, #12
 80038bc:	b29b      	uxth	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80038ca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	031b      	lsls	r3, r3, #12
 80038d0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	f043 0307 	orr.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	021a      	lsls	r2, r3, #8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	431a      	orrs	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e050      	b.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a18:	d013      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	@ (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a16      	ldr	r2, [pc, #88]	@ (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a15      	ldr	r2, [pc, #84]	@ (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10c      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40014000 	.word	0x40014000

08003a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e042      	b.n	8003b50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd fb12 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	@ 0x24
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fcef 	bl	80044e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d112      	bne.n	8003b98 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_UART_Receive_IT+0x26>
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e00b      	b.n	8003b9a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fad2 	bl	8004138 <UART_Start_Receive_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	e000      	b.n	8003b9a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_UART_IRQHandler+0x66>
 8003bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fbae 	bl	8004364 <UART_Receive_IT>
      return;
 8003c08:	e273      	b.n	80040f2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80de 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x22c>
 8003c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80d1 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_UART_IRQHandler+0xae>
 8003c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_UART_IRQHandler+0xd2>
 8003c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_UART_IRQHandler+0xf6>
 8003c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d011      	beq.n	8003cca <HAL_UART_IRQHandler+0x126>
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f043 0208 	orr.w	r2, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 820a 	beq.w	80040e8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x14e>
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fb39 	bl	8004364 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_UART_IRQHandler+0x17a>
 8003d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04f      	beq.n	8003dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa44 	bl	80041ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d141      	bne.n	8003db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	4a8a      	ldr	r2, [pc, #552]	@ (8003fb4 <HAL_UART_IRQHandler+0x410>)
 8003d8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fd65 	bl	8001862 <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00e      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9ac 	bl	800410c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00a      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9a8 	bl	800410c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e006      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9a4 	bl	800410c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dca:	e18d      	b.n	80040e8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	bf00      	nop
    return;
 8003dce:	e18b      	b.n	80040e8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	f040 8167 	bne.w	80040a8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8160 	beq.w	80040a8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8159 	beq.w	80040a8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e16:	2b40      	cmp	r3, #64	@ 0x40
 8003e18:	f040 80ce 	bne.w	8003fb8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a9 	beq.w	8003f84 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	f080 80a2 	bcs.w	8003f84 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e52:	f000 8088 	beq.w	8003f66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1d9      	bne.n	8003e56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ec6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e1      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e3      	bne.n	8003ede <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e3      	bne.n	8003f24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd fc0e 	bl	8001782 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8cf 	bl	8004120 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f82:	e0b3      	b.n	80040ec <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	f040 80ad 	bne.w	80040ec <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9c:	f040 80a6 	bne.w	80040ec <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8b7 	bl	8004120 <HAL_UARTEx_RxEventCallback>
      return;
 8003fb2:	e09b      	b.n	80040ec <HAL_UART_IRQHandler+0x548>
 8003fb4:	08004273 	.word	0x08004273
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 808e 	beq.w	80040f0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8089 	beq.w	80040f0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004002:	647a      	str	r2, [r7, #68]	@ 0x44
 8004004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e3      	bne.n	8003fde <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	623b      	str	r3, [r7, #32]
   return(result);
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800403a:	633a      	str	r2, [r7, #48]	@ 0x30
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e3      	bne.n	8004016 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60fb      	str	r3, [r7, #12]
   return(result);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0310 	bic.w	r3, r3, #16
 8004072:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	330c      	adds	r3, #12
 800407c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004080:	61fa      	str	r2, [r7, #28]
 8004082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	69b9      	ldr	r1, [r7, #24]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	617b      	str	r3, [r7, #20]
   return(result);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e3      	bne.n	800405c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800409a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f83d 	bl	8004120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a6:	e023      	b.n	80040f0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_UART_IRQHandler+0x524>
 80040b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f8e7 	bl	8004294 <UART_Transmit_IT>
    return;
 80040c6:	e014      	b.n	80040f2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <HAL_UART_IRQHandler+0x54e>
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f927 	bl	8004334 <UART_EndTransmit_IT>
    return;
 80040e6:	e004      	b.n	80040f2 <HAL_UART_IRQHandler+0x54e>
    return;
 80040e8:	bf00      	nop
 80040ea:	e002      	b.n	80040f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80040f0:	bf00      	nop
  }
}
 80040f2:	37e8      	adds	r7, #232	@ 0xe8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2222      	movs	r2, #34	@ 0x22
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0220 	orr.w	r2, r2, #32
 800419c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b095      	sub	sp, #84	@ 0x54
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004208:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800420e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	2b01      	cmp	r3, #1
 8004222:	d119      	bne.n	8004258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60bb      	str	r3, [r7, #8]
   return(result);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	647b      	str	r3, [r7, #68]	@ 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004244:	61ba      	str	r2, [r7, #24]
 8004246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e5      	bne.n	8004224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004266:	bf00      	nop
 8004268:	3754      	adds	r7, #84	@ 0x54
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff ff40 	bl	800410c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b21      	cmp	r3, #33	@ 0x21
 80042a6:	d13e      	bne.n	8004326 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d114      	bne.n	80042dc <UART_Transmit_IT+0x48>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d110      	bne.n	80042dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	621a      	str	r2, [r3, #32]
 80042da:	e008      	b.n	80042ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6211      	str	r1, [r2, #32]
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4619      	mov	r1, r3
 80042fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004310:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004320:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800434a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff fecf 	bl	80040f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08c      	sub	sp, #48	@ 0x30
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b22      	cmp	r3, #34	@ 0x22
 800437e:	f040 80aa 	bne.w	80044d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438a:	d115      	bne.n	80043b8 <UART_Receive_IT+0x54>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	1c9a      	adds	r2, r3, #2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80043b6:	e024      	b.n	8004402 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c6:	d007      	beq.n	80043d8 <UART_Receive_IT+0x74>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <UART_Receive_IT+0x82>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e008      	b.n	80043f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29b      	uxth	r3, r3
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4619      	mov	r1, r3
 8004410:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004412:	2b00      	cmp	r3, #0
 8004414:	d15d      	bne.n	80044d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0220 	bic.w	r2, r2, #32
 8004424:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004434:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	2b01      	cmp	r3, #1
 800445a:	d135      	bne.n	80044c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	613b      	str	r3, [r7, #16]
   return(result);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f023 0310 	bic.w	r3, r3, #16
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004482:	623a      	str	r2, [r7, #32]
 8004484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	69f9      	ldr	r1, [r7, #28]
 8004488:	6a3a      	ldr	r2, [r7, #32]
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e5      	bne.n	8004462 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d10a      	bne.n	80044ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fe2d 	bl	8004120 <HAL_UARTEx_RxEventCallback>
 80044c6:	e002      	b.n	80044ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fc fd25 	bl	8000f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e002      	b.n	80044d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3730      	adds	r7, #48	@ 0x30
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e4:	b0c0      	sub	sp, #256	@ 0x100
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	ea40 0301 	orr.w	r3, r0, r1
 8004508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	431a      	orrs	r2, r3
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	431a      	orrs	r2, r3
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004538:	f021 010c 	bic.w	r1, r1, #12
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004546:	430b      	orrs	r3, r1
 8004548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	6999      	ldr	r1, [r3, #24]
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	ea40 0301 	orr.w	r3, r0, r1
 8004566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b8f      	ldr	r3, [pc, #572]	@ (80047ac <UART_SetConfig+0x2cc>)
 8004570:	429a      	cmp	r2, r3
 8004572:	d005      	beq.n	8004580 <UART_SetConfig+0xa0>
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b8d      	ldr	r3, [pc, #564]	@ (80047b0 <UART_SetConfig+0x2d0>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d104      	bne.n	800458a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7fd ff74 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8004584:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004588:	e003      	b.n	8004592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800458a:	f7fd ff5b 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 800458e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459c:	f040 810c 	bne.w	80047b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045b2:	4622      	mov	r2, r4
 80045b4:	462b      	mov	r3, r5
 80045b6:	1891      	adds	r1, r2, r2
 80045b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045ba:	415b      	adcs	r3, r3
 80045bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045c2:	4621      	mov	r1, r4
 80045c4:	eb12 0801 	adds.w	r8, r2, r1
 80045c8:	4629      	mov	r1, r5
 80045ca:	eb43 0901 	adc.w	r9, r3, r1
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045e2:	4690      	mov	r8, r2
 80045e4:	4699      	mov	r9, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	eb18 0303 	adds.w	r3, r8, r3
 80045ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045f0:	462b      	mov	r3, r5
 80045f2:	eb49 0303 	adc.w	r3, r9, r3
 80045f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004606:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800460a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800460e:	460b      	mov	r3, r1
 8004610:	18db      	adds	r3, r3, r3
 8004612:	653b      	str	r3, [r7, #80]	@ 0x50
 8004614:	4613      	mov	r3, r2
 8004616:	eb42 0303 	adc.w	r3, r2, r3
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
 800461c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004624:	f7fb fe2c 	bl	8000280 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4b61      	ldr	r3, [pc, #388]	@ (80047b4 <UART_SetConfig+0x2d4>)
 800462e:	fba3 2302 	umull	r2, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	011c      	lsls	r4, r3, #4
 8004636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004640:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	1891      	adds	r1, r2, r2
 800464e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004650:	415b      	adcs	r3, r3
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004658:	4641      	mov	r1, r8
 800465a:	eb12 0a01 	adds.w	sl, r2, r1
 800465e:	4649      	mov	r1, r9
 8004660:	eb43 0b01 	adc.w	fp, r3, r1
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004678:	4692      	mov	sl, r2
 800467a:	469b      	mov	fp, r3
 800467c:	4643      	mov	r3, r8
 800467e:	eb1a 0303 	adds.w	r3, sl, r3
 8004682:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004686:	464b      	mov	r3, r9
 8004688:	eb4b 0303 	adc.w	r3, fp, r3
 800468c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800469c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046a4:	460b      	mov	r3, r1
 80046a6:	18db      	adds	r3, r3, r3
 80046a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046aa:	4613      	mov	r3, r2
 80046ac:	eb42 0303 	adc.w	r3, r2, r3
 80046b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046ba:	f7fb fde1 	bl	8000280 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <UART_SetConfig+0x2d4>)
 80046c6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2264      	movs	r2, #100	@ 0x64
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	1acb      	subs	r3, r1, r3
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046da:	4b36      	ldr	r3, [pc, #216]	@ (80047b4 <UART_SetConfig+0x2d4>)
 80046dc:	fba3 2302 	umull	r2, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046e8:	441c      	add	r4, r3
 80046ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004704:	415b      	adcs	r3, r3
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	6339      	str	r1, [r7, #48]	@ 0x30
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004740:	464b      	mov	r3, r9
 8004742:	460a      	mov	r2, r1
 8004744:	eb42 0303 	adc.w	r3, r2, r3
 8004748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004758:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800475c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004760:	460b      	mov	r3, r1
 8004762:	18db      	adds	r3, r3, r3
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004766:	4613      	mov	r3, r2
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800476e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004776:	f7fb fd83 	bl	8000280 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <UART_SetConfig+0x2d4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	@ 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	3332      	adds	r3, #50	@ 0x32
 8004792:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <UART_SetConfig+0x2d4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 0207 	and.w	r2, r3, #7
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4422      	add	r2, r4
 80047a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047a8:	e106      	b.n	80049b8 <UART_SetConfig+0x4d8>
 80047aa:	bf00      	nop
 80047ac:	40011000 	.word	0x40011000
 80047b0:	40011400 	.word	0x40011400
 80047b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047ca:	4642      	mov	r2, r8
 80047cc:	464b      	mov	r3, r9
 80047ce:	1891      	adds	r1, r2, r2
 80047d0:	6239      	str	r1, [r7, #32]
 80047d2:	415b      	adcs	r3, r3
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047da:	4641      	mov	r1, r8
 80047dc:	1854      	adds	r4, r2, r1
 80047de:	4649      	mov	r1, r9
 80047e0:	eb43 0501 	adc.w	r5, r3, r1
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	00eb      	lsls	r3, r5, #3
 80047ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f2:	00e2      	lsls	r2, r4, #3
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
 80047f8:	4643      	mov	r3, r8
 80047fa:	18e3      	adds	r3, r4, r3
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004800:	464b      	mov	r3, r9
 8004802:	eb45 0303 	adc.w	r3, r5, r3
 8004806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004826:	4629      	mov	r1, r5
 8004828:	008b      	lsls	r3, r1, #2
 800482a:	4621      	mov	r1, r4
 800482c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004830:	4621      	mov	r1, r4
 8004832:	008a      	lsls	r2, r1, #2
 8004834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004838:	f7fb fd22 	bl	8000280 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4b60      	ldr	r3, [pc, #384]	@ (80049c4 <UART_SetConfig+0x4e4>)
 8004842:	fba3 2302 	umull	r2, r3, r3, r2
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	011c      	lsls	r4, r3, #4
 800484a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004854:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	1891      	adds	r1, r2, r2
 8004862:	61b9      	str	r1, [r7, #24]
 8004864:	415b      	adcs	r3, r3
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486c:	4641      	mov	r1, r8
 800486e:	1851      	adds	r1, r2, r1
 8004870:	6139      	str	r1, [r7, #16]
 8004872:	4649      	mov	r1, r9
 8004874:	414b      	adcs	r3, r1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004884:	4659      	mov	r1, fp
 8004886:	00cb      	lsls	r3, r1, #3
 8004888:	4651      	mov	r1, sl
 800488a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488e:	4651      	mov	r1, sl
 8004890:	00ca      	lsls	r2, r1, #3
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	4603      	mov	r3, r0
 8004898:	4642      	mov	r2, r8
 800489a:	189b      	adds	r3, r3, r2
 800489c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048a0:	464b      	mov	r3, r9
 80048a2:	460a      	mov	r2, r1
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048c4:	4649      	mov	r1, r9
 80048c6:	008b      	lsls	r3, r1, #2
 80048c8:	4641      	mov	r1, r8
 80048ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ce:	4641      	mov	r1, r8
 80048d0:	008a      	lsls	r2, r1, #2
 80048d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048d6:	f7fb fcd3 	bl	8000280 <__aeabi_uldivmod>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	4b38      	ldr	r3, [pc, #224]	@ (80049c4 <UART_SetConfig+0x4e4>)
 80048e2:	fba3 2301 	umull	r2, r3, r3, r1
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2264      	movs	r2, #100	@ 0x64
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	1acb      	subs	r3, r1, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	@ 0x32
 80048f4:	4a33      	ldr	r2, [pc, #204]	@ (80049c4 <UART_SetConfig+0x4e4>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004900:	441c      	add	r4, r3
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	673b      	str	r3, [r7, #112]	@ 0x70
 800490a:	677a      	str	r2, [r7, #116]	@ 0x74
 800490c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	1891      	adds	r1, r2, r2
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	415b      	adcs	r3, r3
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004920:	4641      	mov	r1, r8
 8004922:	1851      	adds	r1, r2, r1
 8004924:	6039      	str	r1, [r7, #0]
 8004926:	4649      	mov	r1, r9
 8004928:	414b      	adcs	r3, r1
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004938:	4659      	mov	r1, fp
 800493a:	00cb      	lsls	r3, r1, #3
 800493c:	4651      	mov	r1, sl
 800493e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004942:	4651      	mov	r1, sl
 8004944:	00ca      	lsls	r2, r1, #3
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	4603      	mov	r3, r0
 800494c:	4642      	mov	r2, r8
 800494e:	189b      	adds	r3, r3, r2
 8004950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004952:	464b      	mov	r3, r9
 8004954:	460a      	mov	r2, r1
 8004956:	eb42 0303 	adc.w	r3, r2, r3
 800495a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	663b      	str	r3, [r7, #96]	@ 0x60
 8004966:	667a      	str	r2, [r7, #100]	@ 0x64
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004974:	4649      	mov	r1, r9
 8004976:	008b      	lsls	r3, r1, #2
 8004978:	4641      	mov	r1, r8
 800497a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800497e:	4641      	mov	r1, r8
 8004980:	008a      	lsls	r2, r1, #2
 8004982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004986:	f7fb fc7b 	bl	8000280 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <UART_SetConfig+0x4e4>)
 8004990:	fba3 1302 	umull	r1, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2164      	movs	r1, #100	@ 0x64
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	3332      	adds	r3, #50	@ 0x32
 80049a2:	4a08      	ldr	r2, [pc, #32]	@ (80049c4 <UART_SetConfig+0x4e4>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f003 020f 	and.w	r2, r3, #15
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4422      	add	r2, r4
 80049b6:	609a      	str	r2, [r3, #8]
}
 80049b8:	bf00      	nop
 80049ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049be:	46bd      	mov	sp, r7
 80049c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c4:	51eb851f 	.word	0x51eb851f

080049c8 <srand>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4b10      	ldr	r3, [pc, #64]	@ (8004a0c <srand+0x44>)
 80049cc:	681d      	ldr	r5, [r3, #0]
 80049ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80049d0:	4604      	mov	r4, r0
 80049d2:	b9b3      	cbnz	r3, 8004a02 <srand+0x3a>
 80049d4:	2018      	movs	r0, #24
 80049d6:	f000 fa4d 	bl	8004e74 <malloc>
 80049da:	4602      	mov	r2, r0
 80049dc:	6328      	str	r0, [r5, #48]	@ 0x30
 80049de:	b920      	cbnz	r0, 80049ea <srand+0x22>
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <srand+0x48>)
 80049e2:	480c      	ldr	r0, [pc, #48]	@ (8004a14 <srand+0x4c>)
 80049e4:	2146      	movs	r1, #70	@ 0x46
 80049e6:	f000 f9dd 	bl	8004da4 <__assert_func>
 80049ea:	490b      	ldr	r1, [pc, #44]	@ (8004a18 <srand+0x50>)
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <srand+0x54>)
 80049ee:	e9c0 1300 	strd	r1, r3, [r0]
 80049f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <srand+0x58>)
 80049f4:	6083      	str	r3, [r0, #8]
 80049f6:	230b      	movs	r3, #11
 80049f8:	8183      	strh	r3, [r0, #12]
 80049fa:	2100      	movs	r1, #0
 80049fc:	2001      	movs	r0, #1
 80049fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a02:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a04:	2200      	movs	r2, #0
 8004a06:	611c      	str	r4, [r3, #16]
 8004a08:	615a      	str	r2, [r3, #20]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20000018 	.word	0x20000018
 8004a10:	08005a0c 	.word	0x08005a0c
 8004a14:	08005a23 	.word	0x08005a23
 8004a18:	abcd330e 	.word	0xabcd330e
 8004a1c:	e66d1234 	.word	0xe66d1234
 8004a20:	0005deec 	.word	0x0005deec

08004a24 <rand>:
 8004a24:	4b16      	ldr	r3, [pc, #88]	@ (8004a80 <rand+0x5c>)
 8004a26:	b510      	push	{r4, lr}
 8004a28:	681c      	ldr	r4, [r3, #0]
 8004a2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a2c:	b9b3      	cbnz	r3, 8004a5c <rand+0x38>
 8004a2e:	2018      	movs	r0, #24
 8004a30:	f000 fa20 	bl	8004e74 <malloc>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6320      	str	r0, [r4, #48]	@ 0x30
 8004a38:	b920      	cbnz	r0, 8004a44 <rand+0x20>
 8004a3a:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <rand+0x60>)
 8004a3c:	4812      	ldr	r0, [pc, #72]	@ (8004a88 <rand+0x64>)
 8004a3e:	2152      	movs	r1, #82	@ 0x52
 8004a40:	f000 f9b0 	bl	8004da4 <__assert_func>
 8004a44:	4911      	ldr	r1, [pc, #68]	@ (8004a8c <rand+0x68>)
 8004a46:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <rand+0x6c>)
 8004a48:	e9c0 1300 	strd	r1, r3, [r0]
 8004a4c:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <rand+0x70>)
 8004a4e:	6083      	str	r3, [r0, #8]
 8004a50:	230b      	movs	r3, #11
 8004a52:	8183      	strh	r3, [r0, #12]
 8004a54:	2100      	movs	r1, #0
 8004a56:	2001      	movs	r0, #1
 8004a58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a5e:	480e      	ldr	r0, [pc, #56]	@ (8004a98 <rand+0x74>)
 8004a60:	690b      	ldr	r3, [r1, #16]
 8004a62:	694c      	ldr	r4, [r1, #20]
 8004a64:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <rand+0x78>)
 8004a66:	4358      	muls	r0, r3
 8004a68:	fb02 0004 	mla	r0, r2, r4, r0
 8004a6c:	fba3 3202 	umull	r3, r2, r3, r2
 8004a70:	3301      	adds	r3, #1
 8004a72:	eb40 0002 	adc.w	r0, r0, r2
 8004a76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004a7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004a7e:	bd10      	pop	{r4, pc}
 8004a80:	20000018 	.word	0x20000018
 8004a84:	08005a0c 	.word	0x08005a0c
 8004a88:	08005a23 	.word	0x08005a23
 8004a8c:	abcd330e 	.word	0xabcd330e
 8004a90:	e66d1234 	.word	0xe66d1234
 8004a94:	0005deec 	.word	0x0005deec
 8004a98:	5851f42d 	.word	0x5851f42d
 8004a9c:	4c957f2d 	.word	0x4c957f2d

08004aa0 <std>:
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aae:	6083      	str	r3, [r0, #8]
 8004ab0:	8181      	strh	r1, [r0, #12]
 8004ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ab4:	81c2      	strh	r2, [r0, #14]
 8004ab6:	6183      	str	r3, [r0, #24]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	2208      	movs	r2, #8
 8004abc:	305c      	adds	r0, #92	@ 0x5c
 8004abe:	f000 f8f4 	bl	8004caa <memset>
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <std+0x58>)
 8004ac4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <std+0x5c>)
 8004ac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004aca:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <std+0x60>)
 8004acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <std+0x64>)
 8004ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <std+0x68>)
 8004ad4:	6224      	str	r4, [r4, #32]
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d006      	beq.n	8004ae8 <std+0x48>
 8004ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ade:	4294      	cmp	r4, r2
 8004ae0:	d002      	beq.n	8004ae8 <std+0x48>
 8004ae2:	33d0      	adds	r3, #208	@ 0xd0
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	d105      	bne.n	8004af4 <std+0x54>
 8004ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af0:	f000 b954 	b.w	8004d9c <__retarget_lock_init_recursive>
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	bf00      	nop
 8004af8:	08004c25 	.word	0x08004c25
 8004afc:	08004c47 	.word	0x08004c47
 8004b00:	08004c7f 	.word	0x08004c7f
 8004b04:	08004ca3 	.word	0x08004ca3
 8004b08:	2000017c 	.word	0x2000017c

08004b0c <stdio_exit_handler>:
 8004b0c:	4a02      	ldr	r2, [pc, #8]	@ (8004b18 <stdio_exit_handler+0xc>)
 8004b0e:	4903      	ldr	r1, [pc, #12]	@ (8004b1c <stdio_exit_handler+0x10>)
 8004b10:	4803      	ldr	r0, [pc, #12]	@ (8004b20 <stdio_exit_handler+0x14>)
 8004b12:	f000 b869 	b.w	8004be8 <_fwalk_sglue>
 8004b16:	bf00      	nop
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	080050e9 	.word	0x080050e9
 8004b20:	2000001c 	.word	0x2000001c

08004b24 <cleanup_stdio>:
 8004b24:	6841      	ldr	r1, [r0, #4]
 8004b26:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <cleanup_stdio+0x34>)
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d001      	beq.n	8004b34 <cleanup_stdio+0x10>
 8004b30:	f000 fada 	bl	80050e8 <_fflush_r>
 8004b34:	68a1      	ldr	r1, [r4, #8]
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <cleanup_stdio+0x38>)
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <cleanup_stdio+0x1e>
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 fad3 	bl	80050e8 <_fflush_r>
 8004b42:	68e1      	ldr	r1, [r4, #12]
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <cleanup_stdio+0x3c>)
 8004b46:	4299      	cmp	r1, r3
 8004b48:	d004      	beq.n	8004b54 <cleanup_stdio+0x30>
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b50:	f000 baca 	b.w	80050e8 <_fflush_r>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	2000017c 	.word	0x2000017c
 8004b5c:	200001e4 	.word	0x200001e4
 8004b60:	2000024c 	.word	0x2000024c

08004b64 <global_stdio_init.part.0>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <global_stdio_init.part.0+0x30>)
 8004b68:	4c0b      	ldr	r4, [pc, #44]	@ (8004b98 <global_stdio_init.part.0+0x34>)
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b9c <global_stdio_init.part.0+0x38>)
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	4620      	mov	r0, r4
 8004b70:	2200      	movs	r2, #0
 8004b72:	2104      	movs	r1, #4
 8004b74:	f7ff ff94 	bl	8004aa0 <std>
 8004b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	2109      	movs	r1, #9
 8004b80:	f7ff ff8e 	bl	8004aa0 <std>
 8004b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b88:	2202      	movs	r2, #2
 8004b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8e:	2112      	movs	r1, #18
 8004b90:	f7ff bf86 	b.w	8004aa0 <std>
 8004b94:	200002b4 	.word	0x200002b4
 8004b98:	2000017c 	.word	0x2000017c
 8004b9c:	08004b0d 	.word	0x08004b0d

08004ba0 <__sfp_lock_acquire>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	@ (8004ba8 <__sfp_lock_acquire+0x8>)
 8004ba2:	f000 b8fc 	b.w	8004d9e <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	200002bd 	.word	0x200002bd

08004bac <__sfp_lock_release>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__sfp_lock_release+0x8>)
 8004bae:	f000 b8f7 	b.w	8004da0 <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	200002bd 	.word	0x200002bd

08004bb8 <__sinit>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	f7ff fff0 	bl	8004ba0 <__sfp_lock_acquire>
 8004bc0:	6a23      	ldr	r3, [r4, #32]
 8004bc2:	b11b      	cbz	r3, 8004bcc <__sinit+0x14>
 8004bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc8:	f7ff bff0 	b.w	8004bac <__sfp_lock_release>
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <__sinit+0x28>)
 8004bce:	6223      	str	r3, [r4, #32]
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <__sinit+0x2c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f5      	bne.n	8004bc4 <__sinit+0xc>
 8004bd8:	f7ff ffc4 	bl	8004b64 <global_stdio_init.part.0>
 8004bdc:	e7f2      	b.n	8004bc4 <__sinit+0xc>
 8004bde:	bf00      	nop
 8004be0:	08004b25 	.word	0x08004b25
 8004be4:	200002b4 	.word	0x200002b4

08004be8 <_fwalk_sglue>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	4607      	mov	r7, r0
 8004bee:	4688      	mov	r8, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8004bfc:	d505      	bpl.n	8004c0a <_fwalk_sglue+0x22>
 8004bfe:	6824      	ldr	r4, [r4, #0]
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	d1f7      	bne.n	8004bf4 <_fwalk_sglue+0xc>
 8004c04:	4630      	mov	r0, r6
 8004c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d907      	bls.n	8004c20 <_fwalk_sglue+0x38>
 8004c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c14:	3301      	adds	r3, #1
 8004c16:	d003      	beq.n	8004c20 <_fwalk_sglue+0x38>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c0      	blx	r8
 8004c1e:	4306      	orrs	r6, r0
 8004c20:	3568      	adds	r5, #104	@ 0x68
 8004c22:	e7e9      	b.n	8004bf8 <_fwalk_sglue+0x10>

08004c24 <__sread>:
 8004c24:	b510      	push	{r4, lr}
 8004c26:	460c      	mov	r4, r1
 8004c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2c:	f000 f868 	bl	8004d00 <_read_r>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	bfab      	itete	ge
 8004c34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c36:	89a3      	ldrhlt	r3, [r4, #12]
 8004c38:	181b      	addge	r3, r3, r0
 8004c3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c3e:	bfac      	ite	ge
 8004c40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c42:	81a3      	strhlt	r3, [r4, #12]
 8004c44:	bd10      	pop	{r4, pc}

08004c46 <__swrite>:
 8004c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	898b      	ldrh	r3, [r1, #12]
 8004c4e:	05db      	lsls	r3, r3, #23
 8004c50:	4605      	mov	r5, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4616      	mov	r6, r2
 8004c56:	d505      	bpl.n	8004c64 <__swrite+0x1e>
 8004c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f000 f83c 	bl	8004cdc <_lseek_r>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	4632      	mov	r2, r6
 8004c72:	463b      	mov	r3, r7
 8004c74:	4628      	mov	r0, r5
 8004c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7a:	f000 b853 	b.w	8004d24 <_write_r>

08004c7e <__sseek>:
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	460c      	mov	r4, r1
 8004c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c86:	f000 f829 	bl	8004cdc <_lseek_r>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	bf15      	itete	ne
 8004c90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c9a:	81a3      	strheq	r3, [r4, #12]
 8004c9c:	bf18      	it	ne
 8004c9e:	81a3      	strhne	r3, [r4, #12]
 8004ca0:	bd10      	pop	{r4, pc}

08004ca2 <__sclose>:
 8004ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca6:	f000 b809 	b.w	8004cbc <_close_r>

08004caa <memset>:
 8004caa:	4402      	add	r2, r0
 8004cac:	4603      	mov	r3, r0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d100      	bne.n	8004cb4 <memset+0xa>
 8004cb2:	4770      	bx	lr
 8004cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb8:	e7f9      	b.n	8004cae <memset+0x4>
	...

08004cbc <_close_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d06      	ldr	r5, [pc, #24]	@ (8004cd8 <_close_r+0x1c>)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	f7fc fb0e 	bl	80012e8 <_close>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_close_r+0x1a>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_close_r+0x1a>
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	200002b8 	.word	0x200002b8

08004cdc <_lseek_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4d07      	ldr	r5, [pc, #28]	@ (8004cfc <_lseek_r+0x20>)
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	602a      	str	r2, [r5, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f7fc fb23 	bl	8001336 <_lseek>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_lseek_r+0x1e>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_lseek_r+0x1e>
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	200002b8 	.word	0x200002b8

08004d00 <_read_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d07      	ldr	r5, [pc, #28]	@ (8004d20 <_read_r+0x20>)
 8004d04:	4604      	mov	r4, r0
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	602a      	str	r2, [r5, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fc fab1 	bl	8001276 <_read>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_read_r+0x1e>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_read_r+0x1e>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	200002b8 	.word	0x200002b8

08004d24 <_write_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d07      	ldr	r5, [pc, #28]	@ (8004d44 <_write_r+0x20>)
 8004d28:	4604      	mov	r4, r0
 8004d2a:	4608      	mov	r0, r1
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	602a      	str	r2, [r5, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f7fc fabc 	bl	80012b0 <_write>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_write_r+0x1e>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_write_r+0x1e>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	200002b8 	.word	0x200002b8

08004d48 <__errno>:
 8004d48:	4b01      	ldr	r3, [pc, #4]	@ (8004d50 <__errno+0x8>)
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000018 	.word	0x20000018

08004d54 <__libc_init_array>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	4d0d      	ldr	r5, [pc, #52]	@ (8004d8c <__libc_init_array+0x38>)
 8004d58:	4c0d      	ldr	r4, [pc, #52]	@ (8004d90 <__libc_init_array+0x3c>)
 8004d5a:	1b64      	subs	r4, r4, r5
 8004d5c:	10a4      	asrs	r4, r4, #2
 8004d5e:	2600      	movs	r6, #0
 8004d60:	42a6      	cmp	r6, r4
 8004d62:	d109      	bne.n	8004d78 <__libc_init_array+0x24>
 8004d64:	4d0b      	ldr	r5, [pc, #44]	@ (8004d94 <__libc_init_array+0x40>)
 8004d66:	4c0c      	ldr	r4, [pc, #48]	@ (8004d98 <__libc_init_array+0x44>)
 8004d68:	f000 fe38 	bl	80059dc <_init>
 8004d6c:	1b64      	subs	r4, r4, r5
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	2600      	movs	r6, #0
 8004d72:	42a6      	cmp	r6, r4
 8004d74:	d105      	bne.n	8004d82 <__libc_init_array+0x2e>
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7c:	4798      	blx	r3
 8004d7e:	3601      	adds	r6, #1
 8004d80:	e7ee      	b.n	8004d60 <__libc_init_array+0xc>
 8004d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d86:	4798      	blx	r3
 8004d88:	3601      	adds	r6, #1
 8004d8a:	e7f2      	b.n	8004d72 <__libc_init_array+0x1e>
 8004d8c:	08005af4 	.word	0x08005af4
 8004d90:	08005af4 	.word	0x08005af4
 8004d94:	08005af4 	.word	0x08005af4
 8004d98:	08005af8 	.word	0x08005af8

08004d9c <__retarget_lock_init_recursive>:
 8004d9c:	4770      	bx	lr

08004d9e <__retarget_lock_acquire_recursive>:
 8004d9e:	4770      	bx	lr

08004da0 <__retarget_lock_release_recursive>:
 8004da0:	4770      	bx	lr
	...

08004da4 <__assert_func>:
 8004da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004da6:	4614      	mov	r4, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <__assert_func+0x2c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4605      	mov	r5, r0
 8004db0:	68d8      	ldr	r0, [r3, #12]
 8004db2:	b14c      	cbz	r4, 8004dc8 <__assert_func+0x24>
 8004db4:	4b07      	ldr	r3, [pc, #28]	@ (8004dd4 <__assert_func+0x30>)
 8004db6:	9100      	str	r1, [sp, #0]
 8004db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004dbc:	4906      	ldr	r1, [pc, #24]	@ (8004dd8 <__assert_func+0x34>)
 8004dbe:	462b      	mov	r3, r5
 8004dc0:	f000 f9ba 	bl	8005138 <fiprintf>
 8004dc4:	f000 f9da 	bl	800517c <abort>
 8004dc8:	4b04      	ldr	r3, [pc, #16]	@ (8004ddc <__assert_func+0x38>)
 8004dca:	461c      	mov	r4, r3
 8004dcc:	e7f3      	b.n	8004db6 <__assert_func+0x12>
 8004dce:	bf00      	nop
 8004dd0:	20000018 	.word	0x20000018
 8004dd4:	08005a7b 	.word	0x08005a7b
 8004dd8:	08005a88 	.word	0x08005a88
 8004ddc:	08005ab6 	.word	0x08005ab6

08004de0 <_free_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4605      	mov	r5, r0
 8004de4:	2900      	cmp	r1, #0
 8004de6:	d041      	beq.n	8004e6c <_free_r+0x8c>
 8004de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dec:	1f0c      	subs	r4, r1, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfb8      	it	lt
 8004df2:	18e4      	addlt	r4, r4, r3
 8004df4:	f000 f8e8 	bl	8004fc8 <__malloc_lock>
 8004df8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e70 <_free_r+0x90>)
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	b933      	cbnz	r3, 8004e0c <_free_r+0x2c>
 8004dfe:	6063      	str	r3, [r4, #4]
 8004e00:	6014      	str	r4, [r2, #0]
 8004e02:	4628      	mov	r0, r5
 8004e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e08:	f000 b8e4 	b.w	8004fd4 <__malloc_unlock>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d908      	bls.n	8004e22 <_free_r+0x42>
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	1821      	adds	r1, r4, r0
 8004e14:	428b      	cmp	r3, r1
 8004e16:	bf01      	itttt	eq
 8004e18:	6819      	ldreq	r1, [r3, #0]
 8004e1a:	685b      	ldreq	r3, [r3, #4]
 8004e1c:	1809      	addeq	r1, r1, r0
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	e7ed      	b.n	8004dfe <_free_r+0x1e>
 8004e22:	461a      	mov	r2, r3
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b10b      	cbz	r3, 8004e2c <_free_r+0x4c>
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d9fa      	bls.n	8004e22 <_free_r+0x42>
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	1850      	adds	r0, r2, r1
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d10b      	bne.n	8004e4c <_free_r+0x6c>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	4401      	add	r1, r0
 8004e38:	1850      	adds	r0, r2, r1
 8004e3a:	4283      	cmp	r3, r0
 8004e3c:	6011      	str	r1, [r2, #0]
 8004e3e:	d1e0      	bne.n	8004e02 <_free_r+0x22>
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	6053      	str	r3, [r2, #4]
 8004e46:	4408      	add	r0, r1
 8004e48:	6010      	str	r0, [r2, #0]
 8004e4a:	e7da      	b.n	8004e02 <_free_r+0x22>
 8004e4c:	d902      	bls.n	8004e54 <_free_r+0x74>
 8004e4e:	230c      	movs	r3, #12
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	e7d6      	b.n	8004e02 <_free_r+0x22>
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	1821      	adds	r1, r4, r0
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf04      	itt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	bf04      	itt	eq
 8004e64:	1809      	addeq	r1, r1, r0
 8004e66:	6021      	streq	r1, [r4, #0]
 8004e68:	6054      	str	r4, [r2, #4]
 8004e6a:	e7ca      	b.n	8004e02 <_free_r+0x22>
 8004e6c:	bd38      	pop	{r3, r4, r5, pc}
 8004e6e:	bf00      	nop
 8004e70:	200002c4 	.word	0x200002c4

08004e74 <malloc>:
 8004e74:	4b02      	ldr	r3, [pc, #8]	@ (8004e80 <malloc+0xc>)
 8004e76:	4601      	mov	r1, r0
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	f000 b825 	b.w	8004ec8 <_malloc_r>
 8004e7e:	bf00      	nop
 8004e80:	20000018 	.word	0x20000018

08004e84 <sbrk_aligned>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec4 <sbrk_aligned+0x40>)
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6831      	ldr	r1, [r6, #0]
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	b911      	cbnz	r1, 8004e96 <sbrk_aligned+0x12>
 8004e90:	f000 f964 	bl	800515c <_sbrk_r>
 8004e94:	6030      	str	r0, [r6, #0]
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 f95f 	bl	800515c <_sbrk_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d103      	bne.n	8004eaa <sbrk_aligned+0x26>
 8004ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	1cc4      	adds	r4, r0, #3
 8004eac:	f024 0403 	bic.w	r4, r4, #3
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d0f8      	beq.n	8004ea6 <sbrk_aligned+0x22>
 8004eb4:	1a21      	subs	r1, r4, r0
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 f950 	bl	800515c <_sbrk_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1f2      	bne.n	8004ea6 <sbrk_aligned+0x22>
 8004ec0:	e7ef      	b.n	8004ea2 <sbrk_aligned+0x1e>
 8004ec2:	bf00      	nop
 8004ec4:	200002c0 	.word	0x200002c0

08004ec8 <_malloc_r>:
 8004ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ecc:	1ccd      	adds	r5, r1, #3
 8004ece:	f025 0503 	bic.w	r5, r5, #3
 8004ed2:	3508      	adds	r5, #8
 8004ed4:	2d0c      	cmp	r5, #12
 8004ed6:	bf38      	it	cc
 8004ed8:	250c      	movcc	r5, #12
 8004eda:	2d00      	cmp	r5, #0
 8004edc:	4606      	mov	r6, r0
 8004ede:	db01      	blt.n	8004ee4 <_malloc_r+0x1c>
 8004ee0:	42a9      	cmp	r1, r5
 8004ee2:	d904      	bls.n	8004eee <_malloc_r+0x26>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc4 <_malloc_r+0xfc>
 8004ef2:	f000 f869 	bl	8004fc8 <__malloc_lock>
 8004ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8004efa:	461c      	mov	r4, r3
 8004efc:	bb44      	cbnz	r4, 8004f50 <_malloc_r+0x88>
 8004efe:	4629      	mov	r1, r5
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7ff ffbf 	bl	8004e84 <sbrk_aligned>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	4604      	mov	r4, r0
 8004f0a:	d158      	bne.n	8004fbe <_malloc_r+0xf6>
 8004f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f10:	4627      	mov	r7, r4
 8004f12:	2f00      	cmp	r7, #0
 8004f14:	d143      	bne.n	8004f9e <_malloc_r+0xd6>
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	d04b      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	eb04 0903 	add.w	r9, r4, r3
 8004f24:	f000 f91a 	bl	800515c <_sbrk_r>
 8004f28:	4581      	cmp	r9, r0
 8004f2a:	d142      	bne.n	8004fb2 <_malloc_r+0xea>
 8004f2c:	6821      	ldr	r1, [r4, #0]
 8004f2e:	1a6d      	subs	r5, r5, r1
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffa6 	bl	8004e84 <sbrk_aligned>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d03a      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	442b      	add	r3, r5
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	f8d8 3000 	ldr.w	r3, [r8]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	bb62      	cbnz	r2, 8004fa4 <_malloc_r+0xdc>
 8004f4a:	f8c8 7000 	str.w	r7, [r8]
 8004f4e:	e00f      	b.n	8004f70 <_malloc_r+0xa8>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	1b52      	subs	r2, r2, r5
 8004f54:	d420      	bmi.n	8004f98 <_malloc_r+0xd0>
 8004f56:	2a0b      	cmp	r2, #11
 8004f58:	d917      	bls.n	8004f8a <_malloc_r+0xc2>
 8004f5a:	1961      	adds	r1, r4, r5
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	bf18      	it	ne
 8004f62:	6059      	strne	r1, [r3, #4]
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	bf08      	it	eq
 8004f68:	f8c8 1000 	streq.w	r1, [r8]
 8004f6c:	5162      	str	r2, [r4, r5]
 8004f6e:	604b      	str	r3, [r1, #4]
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 f82f 	bl	8004fd4 <__malloc_unlock>
 8004f76:	f104 000b 	add.w	r0, r4, #11
 8004f7a:	1d23      	adds	r3, r4, #4
 8004f7c:	f020 0007 	bic.w	r0, r0, #7
 8004f80:	1ac2      	subs	r2, r0, r3
 8004f82:	bf1c      	itt	ne
 8004f84:	1a1b      	subne	r3, r3, r0
 8004f86:	50a3      	strne	r3, [r4, r2]
 8004f88:	e7af      	b.n	8004eea <_malloc_r+0x22>
 8004f8a:	6862      	ldr	r2, [r4, #4]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	bf0c      	ite	eq
 8004f90:	f8c8 2000 	streq.w	r2, [r8]
 8004f94:	605a      	strne	r2, [r3, #4]
 8004f96:	e7eb      	b.n	8004f70 <_malloc_r+0xa8>
 8004f98:	4623      	mov	r3, r4
 8004f9a:	6864      	ldr	r4, [r4, #4]
 8004f9c:	e7ae      	b.n	8004efc <_malloc_r+0x34>
 8004f9e:	463c      	mov	r4, r7
 8004fa0:	687f      	ldr	r7, [r7, #4]
 8004fa2:	e7b6      	b.n	8004f12 <_malloc_r+0x4a>
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d1fb      	bne.n	8004fa4 <_malloc_r+0xdc>
 8004fac:	2300      	movs	r3, #0
 8004fae:	6053      	str	r3, [r2, #4]
 8004fb0:	e7de      	b.n	8004f70 <_malloc_r+0xa8>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 f80c 	bl	8004fd4 <__malloc_unlock>
 8004fbc:	e794      	b.n	8004ee8 <_malloc_r+0x20>
 8004fbe:	6005      	str	r5, [r0, #0]
 8004fc0:	e7d6      	b.n	8004f70 <_malloc_r+0xa8>
 8004fc2:	bf00      	nop
 8004fc4:	200002c4 	.word	0x200002c4

08004fc8 <__malloc_lock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	@ (8004fd0 <__malloc_lock+0x8>)
 8004fca:	f7ff bee8 	b.w	8004d9e <__retarget_lock_acquire_recursive>
 8004fce:	bf00      	nop
 8004fd0:	200002bc 	.word	0x200002bc

08004fd4 <__malloc_unlock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	@ (8004fdc <__malloc_unlock+0x8>)
 8004fd6:	f7ff bee3 	b.w	8004da0 <__retarget_lock_release_recursive>
 8004fda:	bf00      	nop
 8004fdc:	200002bc 	.word	0x200002bc

08004fe0 <__sflush_r>:
 8004fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe8:	0716      	lsls	r6, r2, #28
 8004fea:	4605      	mov	r5, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	d454      	bmi.n	800509a <__sflush_r+0xba>
 8004ff0:	684b      	ldr	r3, [r1, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	dc02      	bgt.n	8004ffc <__sflush_r+0x1c>
 8004ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dd48      	ble.n	800508e <__sflush_r+0xae>
 8004ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	d045      	beq.n	800508e <__sflush_r+0xae>
 8005002:	2300      	movs	r3, #0
 8005004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005008:	682f      	ldr	r7, [r5, #0]
 800500a:	6a21      	ldr	r1, [r4, #32]
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	d030      	beq.n	8005072 <__sflush_r+0x92>
 8005010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	0759      	lsls	r1, r3, #29
 8005016:	d505      	bpl.n	8005024 <__sflush_r+0x44>
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800501e:	b10b      	cbz	r3, 8005024 <__sflush_r+0x44>
 8005020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	2300      	movs	r3, #0
 8005026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005028:	6a21      	ldr	r1, [r4, #32]
 800502a:	4628      	mov	r0, r5
 800502c:	47b0      	blx	r6
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	d106      	bne.n	8005042 <__sflush_r+0x62>
 8005034:	6829      	ldr	r1, [r5, #0]
 8005036:	291d      	cmp	r1, #29
 8005038:	d82b      	bhi.n	8005092 <__sflush_r+0xb2>
 800503a:	4a2a      	ldr	r2, [pc, #168]	@ (80050e4 <__sflush_r+0x104>)
 800503c:	40ca      	lsrs	r2, r1
 800503e:	07d6      	lsls	r6, r2, #31
 8005040:	d527      	bpl.n	8005092 <__sflush_r+0xb2>
 8005042:	2200      	movs	r2, #0
 8005044:	6062      	str	r2, [r4, #4]
 8005046:	04d9      	lsls	r1, r3, #19
 8005048:	6922      	ldr	r2, [r4, #16]
 800504a:	6022      	str	r2, [r4, #0]
 800504c:	d504      	bpl.n	8005058 <__sflush_r+0x78>
 800504e:	1c42      	adds	r2, r0, #1
 8005050:	d101      	bne.n	8005056 <__sflush_r+0x76>
 8005052:	682b      	ldr	r3, [r5, #0]
 8005054:	b903      	cbnz	r3, 8005058 <__sflush_r+0x78>
 8005056:	6560      	str	r0, [r4, #84]	@ 0x54
 8005058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800505a:	602f      	str	r7, [r5, #0]
 800505c:	b1b9      	cbz	r1, 800508e <__sflush_r+0xae>
 800505e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005062:	4299      	cmp	r1, r3
 8005064:	d002      	beq.n	800506c <__sflush_r+0x8c>
 8005066:	4628      	mov	r0, r5
 8005068:	f7ff feba 	bl	8004de0 <_free_r>
 800506c:	2300      	movs	r3, #0
 800506e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005070:	e00d      	b.n	800508e <__sflush_r+0xae>
 8005072:	2301      	movs	r3, #1
 8005074:	4628      	mov	r0, r5
 8005076:	47b0      	blx	r6
 8005078:	4602      	mov	r2, r0
 800507a:	1c50      	adds	r0, r2, #1
 800507c:	d1c9      	bne.n	8005012 <__sflush_r+0x32>
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0c6      	beq.n	8005012 <__sflush_r+0x32>
 8005084:	2b1d      	cmp	r3, #29
 8005086:	d001      	beq.n	800508c <__sflush_r+0xac>
 8005088:	2b16      	cmp	r3, #22
 800508a:	d11e      	bne.n	80050ca <__sflush_r+0xea>
 800508c:	602f      	str	r7, [r5, #0]
 800508e:	2000      	movs	r0, #0
 8005090:	e022      	b.n	80050d8 <__sflush_r+0xf8>
 8005092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005096:	b21b      	sxth	r3, r3
 8005098:	e01b      	b.n	80050d2 <__sflush_r+0xf2>
 800509a:	690f      	ldr	r7, [r1, #16]
 800509c:	2f00      	cmp	r7, #0
 800509e:	d0f6      	beq.n	800508e <__sflush_r+0xae>
 80050a0:	0793      	lsls	r3, r2, #30
 80050a2:	680e      	ldr	r6, [r1, #0]
 80050a4:	bf08      	it	eq
 80050a6:	694b      	ldreq	r3, [r1, #20]
 80050a8:	600f      	str	r7, [r1, #0]
 80050aa:	bf18      	it	ne
 80050ac:	2300      	movne	r3, #0
 80050ae:	eba6 0807 	sub.w	r8, r6, r7
 80050b2:	608b      	str	r3, [r1, #8]
 80050b4:	f1b8 0f00 	cmp.w	r8, #0
 80050b8:	dde9      	ble.n	800508e <__sflush_r+0xae>
 80050ba:	6a21      	ldr	r1, [r4, #32]
 80050bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050be:	4643      	mov	r3, r8
 80050c0:	463a      	mov	r2, r7
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b0      	blx	r6
 80050c6:	2800      	cmp	r0, #0
 80050c8:	dc08      	bgt.n	80050dc <__sflush_r+0xfc>
 80050ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050d2:	81a3      	strh	r3, [r4, #12]
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050dc:	4407      	add	r7, r0
 80050de:	eba8 0800 	sub.w	r8, r8, r0
 80050e2:	e7e7      	b.n	80050b4 <__sflush_r+0xd4>
 80050e4:	20400001 	.word	0x20400001

080050e8 <_fflush_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	690b      	ldr	r3, [r1, #16]
 80050ec:	4605      	mov	r5, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	b913      	cbnz	r3, 80050f8 <_fflush_r+0x10>
 80050f2:	2500      	movs	r5, #0
 80050f4:	4628      	mov	r0, r5
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	b118      	cbz	r0, 8005102 <_fflush_r+0x1a>
 80050fa:	6a03      	ldr	r3, [r0, #32]
 80050fc:	b90b      	cbnz	r3, 8005102 <_fflush_r+0x1a>
 80050fe:	f7ff fd5b 	bl	8004bb8 <__sinit>
 8005102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f3      	beq.n	80050f2 <_fflush_r+0xa>
 800510a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800510c:	07d0      	lsls	r0, r2, #31
 800510e:	d404      	bmi.n	800511a <_fflush_r+0x32>
 8005110:	0599      	lsls	r1, r3, #22
 8005112:	d402      	bmi.n	800511a <_fflush_r+0x32>
 8005114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005116:	f7ff fe42 	bl	8004d9e <__retarget_lock_acquire_recursive>
 800511a:	4628      	mov	r0, r5
 800511c:	4621      	mov	r1, r4
 800511e:	f7ff ff5f 	bl	8004fe0 <__sflush_r>
 8005122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005124:	07da      	lsls	r2, r3, #31
 8005126:	4605      	mov	r5, r0
 8005128:	d4e4      	bmi.n	80050f4 <_fflush_r+0xc>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	059b      	lsls	r3, r3, #22
 800512e:	d4e1      	bmi.n	80050f4 <_fflush_r+0xc>
 8005130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005132:	f7ff fe35 	bl	8004da0 <__retarget_lock_release_recursive>
 8005136:	e7dd      	b.n	80050f4 <_fflush_r+0xc>

08005138 <fiprintf>:
 8005138:	b40e      	push	{r1, r2, r3}
 800513a:	b503      	push	{r0, r1, lr}
 800513c:	4601      	mov	r1, r0
 800513e:	ab03      	add	r3, sp, #12
 8005140:	4805      	ldr	r0, [pc, #20]	@ (8005158 <fiprintf+0x20>)
 8005142:	f853 2b04 	ldr.w	r2, [r3], #4
 8005146:	6800      	ldr	r0, [r0, #0]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	f000 f847 	bl	80051dc <_vfiprintf_r>
 800514e:	b002      	add	sp, #8
 8005150:	f85d eb04 	ldr.w	lr, [sp], #4
 8005154:	b003      	add	sp, #12
 8005156:	4770      	bx	lr
 8005158:	20000018 	.word	0x20000018

0800515c <_sbrk_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d06      	ldr	r5, [pc, #24]	@ (8005178 <_sbrk_r+0x1c>)
 8005160:	2300      	movs	r3, #0
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	f7fc f8f2 	bl	8001350 <_sbrk>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_sbrk_r+0x1a>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_sbrk_r+0x1a>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	200002b8 	.word	0x200002b8

0800517c <abort>:
 800517c:	b508      	push	{r3, lr}
 800517e:	2006      	movs	r0, #6
 8005180:	f000 fb8c 	bl	800589c <raise>
 8005184:	2001      	movs	r0, #1
 8005186:	f7fc f86b 	bl	8001260 <_exit>

0800518a <__sfputc_r>:
 800518a:	6893      	ldr	r3, [r2, #8]
 800518c:	3b01      	subs	r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	b410      	push	{r4}
 8005192:	6093      	str	r3, [r2, #8]
 8005194:	da08      	bge.n	80051a8 <__sfputc_r+0x1e>
 8005196:	6994      	ldr	r4, [r2, #24]
 8005198:	42a3      	cmp	r3, r4
 800519a:	db01      	blt.n	80051a0 <__sfputc_r+0x16>
 800519c:	290a      	cmp	r1, #10
 800519e:	d103      	bne.n	80051a8 <__sfputc_r+0x1e>
 80051a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a4:	f000 babe 	b.w	8005724 <__swbuf_r>
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	1c58      	adds	r0, r3, #1
 80051ac:	6010      	str	r0, [r2, #0]
 80051ae:	7019      	strb	r1, [r3, #0]
 80051b0:	4608      	mov	r0, r1
 80051b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <__sfputs_r>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	4606      	mov	r6, r0
 80051bc:	460f      	mov	r7, r1
 80051be:	4614      	mov	r4, r2
 80051c0:	18d5      	adds	r5, r2, r3
 80051c2:	42ac      	cmp	r4, r5
 80051c4:	d101      	bne.n	80051ca <__sfputs_r+0x12>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e007      	b.n	80051da <__sfputs_r+0x22>
 80051ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ce:	463a      	mov	r2, r7
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff ffda 	bl	800518a <__sfputc_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	d1f3      	bne.n	80051c2 <__sfputs_r+0xa>
 80051da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051dc <_vfiprintf_r>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	460d      	mov	r5, r1
 80051e2:	b09d      	sub	sp, #116	@ 0x74
 80051e4:	4614      	mov	r4, r2
 80051e6:	4698      	mov	r8, r3
 80051e8:	4606      	mov	r6, r0
 80051ea:	b118      	cbz	r0, 80051f4 <_vfiprintf_r+0x18>
 80051ec:	6a03      	ldr	r3, [r0, #32]
 80051ee:	b90b      	cbnz	r3, 80051f4 <_vfiprintf_r+0x18>
 80051f0:	f7ff fce2 	bl	8004bb8 <__sinit>
 80051f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051f6:	07d9      	lsls	r1, r3, #31
 80051f8:	d405      	bmi.n	8005206 <_vfiprintf_r+0x2a>
 80051fa:	89ab      	ldrh	r3, [r5, #12]
 80051fc:	059a      	lsls	r2, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_vfiprintf_r+0x2a>
 8005200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005202:	f7ff fdcc 	bl	8004d9e <__retarget_lock_acquire_recursive>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	d501      	bpl.n	8005210 <_vfiprintf_r+0x34>
 800520c:	692b      	ldr	r3, [r5, #16]
 800520e:	b99b      	cbnz	r3, 8005238 <_vfiprintf_r+0x5c>
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f000 fac4 	bl	80057a0 <__swsetup_r>
 8005218:	b170      	cbz	r0, 8005238 <_vfiprintf_r+0x5c>
 800521a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800521c:	07dc      	lsls	r4, r3, #31
 800521e:	d504      	bpl.n	800522a <_vfiprintf_r+0x4e>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	b01d      	add	sp, #116	@ 0x74
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	0598      	lsls	r0, r3, #22
 800522e:	d4f7      	bmi.n	8005220 <_vfiprintf_r+0x44>
 8005230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005232:	f7ff fdb5 	bl	8004da0 <__retarget_lock_release_recursive>
 8005236:	e7f3      	b.n	8005220 <_vfiprintf_r+0x44>
 8005238:	2300      	movs	r3, #0
 800523a:	9309      	str	r3, [sp, #36]	@ 0x24
 800523c:	2320      	movs	r3, #32
 800523e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005242:	f8cd 800c 	str.w	r8, [sp, #12]
 8005246:	2330      	movs	r3, #48	@ 0x30
 8005248:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053f8 <_vfiprintf_r+0x21c>
 800524c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005250:	f04f 0901 	mov.w	r9, #1
 8005254:	4623      	mov	r3, r4
 8005256:	469a      	mov	sl, r3
 8005258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525c:	b10a      	cbz	r2, 8005262 <_vfiprintf_r+0x86>
 800525e:	2a25      	cmp	r2, #37	@ 0x25
 8005260:	d1f9      	bne.n	8005256 <_vfiprintf_r+0x7a>
 8005262:	ebba 0b04 	subs.w	fp, sl, r4
 8005266:	d00b      	beq.n	8005280 <_vfiprintf_r+0xa4>
 8005268:	465b      	mov	r3, fp
 800526a:	4622      	mov	r2, r4
 800526c:	4629      	mov	r1, r5
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff ffa2 	bl	80051b8 <__sfputs_r>
 8005274:	3001      	adds	r0, #1
 8005276:	f000 80a7 	beq.w	80053c8 <_vfiprintf_r+0x1ec>
 800527a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800527c:	445a      	add	r2, fp
 800527e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005280:	f89a 3000 	ldrb.w	r3, [sl]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 809f 	beq.w	80053c8 <_vfiprintf_r+0x1ec>
 800528a:	2300      	movs	r3, #0
 800528c:	f04f 32ff 	mov.w	r2, #4294967295
 8005290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005294:	f10a 0a01 	add.w	sl, sl, #1
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	9307      	str	r3, [sp, #28]
 800529c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80052a2:	4654      	mov	r4, sl
 80052a4:	2205      	movs	r2, #5
 80052a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052aa:	4853      	ldr	r0, [pc, #332]	@ (80053f8 <_vfiprintf_r+0x21c>)
 80052ac:	f7fa ff98 	bl	80001e0 <memchr>
 80052b0:	9a04      	ldr	r2, [sp, #16]
 80052b2:	b9d8      	cbnz	r0, 80052ec <_vfiprintf_r+0x110>
 80052b4:	06d1      	lsls	r1, r2, #27
 80052b6:	bf44      	itt	mi
 80052b8:	2320      	movmi	r3, #32
 80052ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052be:	0713      	lsls	r3, r2, #28
 80052c0:	bf44      	itt	mi
 80052c2:	232b      	movmi	r3, #43	@ 0x2b
 80052c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052c8:	f89a 3000 	ldrb.w	r3, [sl]
 80052cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ce:	d015      	beq.n	80052fc <_vfiprintf_r+0x120>
 80052d0:	9a07      	ldr	r2, [sp, #28]
 80052d2:	4654      	mov	r4, sl
 80052d4:	2000      	movs	r0, #0
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	4621      	mov	r1, r4
 80052dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e0:	3b30      	subs	r3, #48	@ 0x30
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	d94b      	bls.n	800537e <_vfiprintf_r+0x1a2>
 80052e6:	b1b0      	cbz	r0, 8005316 <_vfiprintf_r+0x13a>
 80052e8:	9207      	str	r2, [sp, #28]
 80052ea:	e014      	b.n	8005316 <_vfiprintf_r+0x13a>
 80052ec:	eba0 0308 	sub.w	r3, r0, r8
 80052f0:	fa09 f303 	lsl.w	r3, r9, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	46a2      	mov	sl, r4
 80052fa:	e7d2      	b.n	80052a2 <_vfiprintf_r+0xc6>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	1d19      	adds	r1, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	9103      	str	r1, [sp, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	bfbb      	ittet	lt
 8005308:	425b      	neglt	r3, r3
 800530a:	f042 0202 	orrlt.w	r2, r2, #2
 800530e:	9307      	strge	r3, [sp, #28]
 8005310:	9307      	strlt	r3, [sp, #28]
 8005312:	bfb8      	it	lt
 8005314:	9204      	strlt	r2, [sp, #16]
 8005316:	7823      	ldrb	r3, [r4, #0]
 8005318:	2b2e      	cmp	r3, #46	@ 0x2e
 800531a:	d10a      	bne.n	8005332 <_vfiprintf_r+0x156>
 800531c:	7863      	ldrb	r3, [r4, #1]
 800531e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005320:	d132      	bne.n	8005388 <_vfiprintf_r+0x1ac>
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	1d1a      	adds	r2, r3, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	9203      	str	r2, [sp, #12]
 800532a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800532e:	3402      	adds	r4, #2
 8005330:	9305      	str	r3, [sp, #20]
 8005332:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005408 <_vfiprintf_r+0x22c>
 8005336:	7821      	ldrb	r1, [r4, #0]
 8005338:	2203      	movs	r2, #3
 800533a:	4650      	mov	r0, sl
 800533c:	f7fa ff50 	bl	80001e0 <memchr>
 8005340:	b138      	cbz	r0, 8005352 <_vfiprintf_r+0x176>
 8005342:	9b04      	ldr	r3, [sp, #16]
 8005344:	eba0 000a 	sub.w	r0, r0, sl
 8005348:	2240      	movs	r2, #64	@ 0x40
 800534a:	4082      	lsls	r2, r0
 800534c:	4313      	orrs	r3, r2
 800534e:	3401      	adds	r4, #1
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005356:	4829      	ldr	r0, [pc, #164]	@ (80053fc <_vfiprintf_r+0x220>)
 8005358:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800535c:	2206      	movs	r2, #6
 800535e:	f7fa ff3f 	bl	80001e0 <memchr>
 8005362:	2800      	cmp	r0, #0
 8005364:	d03f      	beq.n	80053e6 <_vfiprintf_r+0x20a>
 8005366:	4b26      	ldr	r3, [pc, #152]	@ (8005400 <_vfiprintf_r+0x224>)
 8005368:	bb1b      	cbnz	r3, 80053b2 <_vfiprintf_r+0x1d6>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	3307      	adds	r3, #7
 800536e:	f023 0307 	bic.w	r3, r3, #7
 8005372:	3308      	adds	r3, #8
 8005374:	9303      	str	r3, [sp, #12]
 8005376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005378:	443b      	add	r3, r7
 800537a:	9309      	str	r3, [sp, #36]	@ 0x24
 800537c:	e76a      	b.n	8005254 <_vfiprintf_r+0x78>
 800537e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005382:	460c      	mov	r4, r1
 8005384:	2001      	movs	r0, #1
 8005386:	e7a8      	b.n	80052da <_vfiprintf_r+0xfe>
 8005388:	2300      	movs	r3, #0
 800538a:	3401      	adds	r4, #1
 800538c:	9305      	str	r3, [sp, #20]
 800538e:	4619      	mov	r1, r3
 8005390:	f04f 0c0a 	mov.w	ip, #10
 8005394:	4620      	mov	r0, r4
 8005396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539a:	3a30      	subs	r2, #48	@ 0x30
 800539c:	2a09      	cmp	r2, #9
 800539e:	d903      	bls.n	80053a8 <_vfiprintf_r+0x1cc>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0c6      	beq.n	8005332 <_vfiprintf_r+0x156>
 80053a4:	9105      	str	r1, [sp, #20]
 80053a6:	e7c4      	b.n	8005332 <_vfiprintf_r+0x156>
 80053a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ac:	4604      	mov	r4, r0
 80053ae:	2301      	movs	r3, #1
 80053b0:	e7f0      	b.n	8005394 <_vfiprintf_r+0x1b8>
 80053b2:	ab03      	add	r3, sp, #12
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	462a      	mov	r2, r5
 80053b8:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <_vfiprintf_r+0x228>)
 80053ba:	a904      	add	r1, sp, #16
 80053bc:	4630      	mov	r0, r6
 80053be:	f3af 8000 	nop.w
 80053c2:	4607      	mov	r7, r0
 80053c4:	1c78      	adds	r0, r7, #1
 80053c6:	d1d6      	bne.n	8005376 <_vfiprintf_r+0x19a>
 80053c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053ca:	07d9      	lsls	r1, r3, #31
 80053cc:	d405      	bmi.n	80053da <_vfiprintf_r+0x1fe>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d402      	bmi.n	80053da <_vfiprintf_r+0x1fe>
 80053d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053d6:	f7ff fce3 	bl	8004da0 <__retarget_lock_release_recursive>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	065b      	lsls	r3, r3, #25
 80053de:	f53f af1f 	bmi.w	8005220 <_vfiprintf_r+0x44>
 80053e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053e4:	e71e      	b.n	8005224 <_vfiprintf_r+0x48>
 80053e6:	ab03      	add	r3, sp, #12
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	462a      	mov	r2, r5
 80053ec:	4b05      	ldr	r3, [pc, #20]	@ (8005404 <_vfiprintf_r+0x228>)
 80053ee:	a904      	add	r1, sp, #16
 80053f0:	4630      	mov	r0, r6
 80053f2:	f000 f879 	bl	80054e8 <_printf_i>
 80053f6:	e7e4      	b.n	80053c2 <_vfiprintf_r+0x1e6>
 80053f8:	08005ab7 	.word	0x08005ab7
 80053fc:	08005ac1 	.word	0x08005ac1
 8005400:	00000000 	.word	0x00000000
 8005404:	080051b9 	.word	0x080051b9
 8005408:	08005abd 	.word	0x08005abd

0800540c <_printf_common>:
 800540c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	4616      	mov	r6, r2
 8005412:	4698      	mov	r8, r3
 8005414:	688a      	ldr	r2, [r1, #8]
 8005416:	690b      	ldr	r3, [r1, #16]
 8005418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800541c:	4293      	cmp	r3, r2
 800541e:	bfb8      	it	lt
 8005420:	4613      	movlt	r3, r2
 8005422:	6033      	str	r3, [r6, #0]
 8005424:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005428:	4607      	mov	r7, r0
 800542a:	460c      	mov	r4, r1
 800542c:	b10a      	cbz	r2, 8005432 <_printf_common+0x26>
 800542e:	3301      	adds	r3, #1
 8005430:	6033      	str	r3, [r6, #0]
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	0699      	lsls	r1, r3, #26
 8005436:	bf42      	ittt	mi
 8005438:	6833      	ldrmi	r3, [r6, #0]
 800543a:	3302      	addmi	r3, #2
 800543c:	6033      	strmi	r3, [r6, #0]
 800543e:	6825      	ldr	r5, [r4, #0]
 8005440:	f015 0506 	ands.w	r5, r5, #6
 8005444:	d106      	bne.n	8005454 <_printf_common+0x48>
 8005446:	f104 0a19 	add.w	sl, r4, #25
 800544a:	68e3      	ldr	r3, [r4, #12]
 800544c:	6832      	ldr	r2, [r6, #0]
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	42ab      	cmp	r3, r5
 8005452:	dc26      	bgt.n	80054a2 <_printf_common+0x96>
 8005454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	3b00      	subs	r3, #0
 800545c:	bf18      	it	ne
 800545e:	2301      	movne	r3, #1
 8005460:	0692      	lsls	r2, r2, #26
 8005462:	d42b      	bmi.n	80054bc <_printf_common+0xb0>
 8005464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005468:	4641      	mov	r1, r8
 800546a:	4638      	mov	r0, r7
 800546c:	47c8      	blx	r9
 800546e:	3001      	adds	r0, #1
 8005470:	d01e      	beq.n	80054b0 <_printf_common+0xa4>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	6922      	ldr	r2, [r4, #16]
 8005476:	f003 0306 	and.w	r3, r3, #6
 800547a:	2b04      	cmp	r3, #4
 800547c:	bf02      	ittt	eq
 800547e:	68e5      	ldreq	r5, [r4, #12]
 8005480:	6833      	ldreq	r3, [r6, #0]
 8005482:	1aed      	subeq	r5, r5, r3
 8005484:	68a3      	ldr	r3, [r4, #8]
 8005486:	bf0c      	ite	eq
 8005488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800548c:	2500      	movne	r5, #0
 800548e:	4293      	cmp	r3, r2
 8005490:	bfc4      	itt	gt
 8005492:	1a9b      	subgt	r3, r3, r2
 8005494:	18ed      	addgt	r5, r5, r3
 8005496:	2600      	movs	r6, #0
 8005498:	341a      	adds	r4, #26
 800549a:	42b5      	cmp	r5, r6
 800549c:	d11a      	bne.n	80054d4 <_printf_common+0xc8>
 800549e:	2000      	movs	r0, #0
 80054a0:	e008      	b.n	80054b4 <_printf_common+0xa8>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4652      	mov	r2, sl
 80054a6:	4641      	mov	r1, r8
 80054a8:	4638      	mov	r0, r7
 80054aa:	47c8      	blx	r9
 80054ac:	3001      	adds	r0, #1
 80054ae:	d103      	bne.n	80054b8 <_printf_common+0xac>
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b8:	3501      	adds	r5, #1
 80054ba:	e7c6      	b.n	800544a <_printf_common+0x3e>
 80054bc:	18e1      	adds	r1, r4, r3
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	2030      	movs	r0, #48	@ 0x30
 80054c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054c6:	4422      	add	r2, r4
 80054c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054d0:	3302      	adds	r3, #2
 80054d2:	e7c7      	b.n	8005464 <_printf_common+0x58>
 80054d4:	2301      	movs	r3, #1
 80054d6:	4622      	mov	r2, r4
 80054d8:	4641      	mov	r1, r8
 80054da:	4638      	mov	r0, r7
 80054dc:	47c8      	blx	r9
 80054de:	3001      	adds	r0, #1
 80054e0:	d0e6      	beq.n	80054b0 <_printf_common+0xa4>
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7d9      	b.n	800549a <_printf_common+0x8e>
	...

080054e8 <_printf_i>:
 80054e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ec:	7e0f      	ldrb	r7, [r1, #24]
 80054ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054f0:	2f78      	cmp	r7, #120	@ 0x78
 80054f2:	4691      	mov	r9, r2
 80054f4:	4680      	mov	r8, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	469a      	mov	sl, r3
 80054fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054fe:	d807      	bhi.n	8005510 <_printf_i+0x28>
 8005500:	2f62      	cmp	r7, #98	@ 0x62
 8005502:	d80a      	bhi.n	800551a <_printf_i+0x32>
 8005504:	2f00      	cmp	r7, #0
 8005506:	f000 80d1 	beq.w	80056ac <_printf_i+0x1c4>
 800550a:	2f58      	cmp	r7, #88	@ 0x58
 800550c:	f000 80b8 	beq.w	8005680 <_printf_i+0x198>
 8005510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005518:	e03a      	b.n	8005590 <_printf_i+0xa8>
 800551a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800551e:	2b15      	cmp	r3, #21
 8005520:	d8f6      	bhi.n	8005510 <_printf_i+0x28>
 8005522:	a101      	add	r1, pc, #4	@ (adr r1, 8005528 <_printf_i+0x40>)
 8005524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005528:	08005581 	.word	0x08005581
 800552c:	08005595 	.word	0x08005595
 8005530:	08005511 	.word	0x08005511
 8005534:	08005511 	.word	0x08005511
 8005538:	08005511 	.word	0x08005511
 800553c:	08005511 	.word	0x08005511
 8005540:	08005595 	.word	0x08005595
 8005544:	08005511 	.word	0x08005511
 8005548:	08005511 	.word	0x08005511
 800554c:	08005511 	.word	0x08005511
 8005550:	08005511 	.word	0x08005511
 8005554:	08005693 	.word	0x08005693
 8005558:	080055bf 	.word	0x080055bf
 800555c:	0800564d 	.word	0x0800564d
 8005560:	08005511 	.word	0x08005511
 8005564:	08005511 	.word	0x08005511
 8005568:	080056b5 	.word	0x080056b5
 800556c:	08005511 	.word	0x08005511
 8005570:	080055bf 	.word	0x080055bf
 8005574:	08005511 	.word	0x08005511
 8005578:	08005511 	.word	0x08005511
 800557c:	08005655 	.word	0x08005655
 8005580:	6833      	ldr	r3, [r6, #0]
 8005582:	1d1a      	adds	r2, r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6032      	str	r2, [r6, #0]
 8005588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800558c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005590:	2301      	movs	r3, #1
 8005592:	e09c      	b.n	80056ce <_printf_i+0x1e6>
 8005594:	6833      	ldr	r3, [r6, #0]
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	1d19      	adds	r1, r3, #4
 800559a:	6031      	str	r1, [r6, #0]
 800559c:	0606      	lsls	r6, r0, #24
 800559e:	d501      	bpl.n	80055a4 <_printf_i+0xbc>
 80055a0:	681d      	ldr	r5, [r3, #0]
 80055a2:	e003      	b.n	80055ac <_printf_i+0xc4>
 80055a4:	0645      	lsls	r5, r0, #25
 80055a6:	d5fb      	bpl.n	80055a0 <_printf_i+0xb8>
 80055a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	da03      	bge.n	80055b8 <_printf_i+0xd0>
 80055b0:	232d      	movs	r3, #45	@ 0x2d
 80055b2:	426d      	negs	r5, r5
 80055b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055b8:	4858      	ldr	r0, [pc, #352]	@ (800571c <_printf_i+0x234>)
 80055ba:	230a      	movs	r3, #10
 80055bc:	e011      	b.n	80055e2 <_printf_i+0xfa>
 80055be:	6821      	ldr	r1, [r4, #0]
 80055c0:	6833      	ldr	r3, [r6, #0]
 80055c2:	0608      	lsls	r0, r1, #24
 80055c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055c8:	d402      	bmi.n	80055d0 <_printf_i+0xe8>
 80055ca:	0649      	lsls	r1, r1, #25
 80055cc:	bf48      	it	mi
 80055ce:	b2ad      	uxthmi	r5, r5
 80055d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80055d2:	4852      	ldr	r0, [pc, #328]	@ (800571c <_printf_i+0x234>)
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	bf14      	ite	ne
 80055d8:	230a      	movne	r3, #10
 80055da:	2308      	moveq	r3, #8
 80055dc:	2100      	movs	r1, #0
 80055de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055e2:	6866      	ldr	r6, [r4, #4]
 80055e4:	60a6      	str	r6, [r4, #8]
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	db05      	blt.n	80055f6 <_printf_i+0x10e>
 80055ea:	6821      	ldr	r1, [r4, #0]
 80055ec:	432e      	orrs	r6, r5
 80055ee:	f021 0104 	bic.w	r1, r1, #4
 80055f2:	6021      	str	r1, [r4, #0]
 80055f4:	d04b      	beq.n	800568e <_printf_i+0x1a6>
 80055f6:	4616      	mov	r6, r2
 80055f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80055fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005600:	5dc7      	ldrb	r7, [r0, r7]
 8005602:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005606:	462f      	mov	r7, r5
 8005608:	42bb      	cmp	r3, r7
 800560a:	460d      	mov	r5, r1
 800560c:	d9f4      	bls.n	80055f8 <_printf_i+0x110>
 800560e:	2b08      	cmp	r3, #8
 8005610:	d10b      	bne.n	800562a <_printf_i+0x142>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	07df      	lsls	r7, r3, #31
 8005616:	d508      	bpl.n	800562a <_printf_i+0x142>
 8005618:	6923      	ldr	r3, [r4, #16]
 800561a:	6861      	ldr	r1, [r4, #4]
 800561c:	4299      	cmp	r1, r3
 800561e:	bfde      	ittt	le
 8005620:	2330      	movle	r3, #48	@ 0x30
 8005622:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005626:	f106 36ff 	addle.w	r6, r6, #4294967295
 800562a:	1b92      	subs	r2, r2, r6
 800562c:	6122      	str	r2, [r4, #16]
 800562e:	f8cd a000 	str.w	sl, [sp]
 8005632:	464b      	mov	r3, r9
 8005634:	aa03      	add	r2, sp, #12
 8005636:	4621      	mov	r1, r4
 8005638:	4640      	mov	r0, r8
 800563a:	f7ff fee7 	bl	800540c <_printf_common>
 800563e:	3001      	adds	r0, #1
 8005640:	d14a      	bne.n	80056d8 <_printf_i+0x1f0>
 8005642:	f04f 30ff 	mov.w	r0, #4294967295
 8005646:	b004      	add	sp, #16
 8005648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	f043 0320 	orr.w	r3, r3, #32
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	4832      	ldr	r0, [pc, #200]	@ (8005720 <_printf_i+0x238>)
 8005656:	2778      	movs	r7, #120	@ 0x78
 8005658:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	6831      	ldr	r1, [r6, #0]
 8005660:	061f      	lsls	r7, r3, #24
 8005662:	f851 5b04 	ldr.w	r5, [r1], #4
 8005666:	d402      	bmi.n	800566e <_printf_i+0x186>
 8005668:	065f      	lsls	r7, r3, #25
 800566a:	bf48      	it	mi
 800566c:	b2ad      	uxthmi	r5, r5
 800566e:	6031      	str	r1, [r6, #0]
 8005670:	07d9      	lsls	r1, r3, #31
 8005672:	bf44      	itt	mi
 8005674:	f043 0320 	orrmi.w	r3, r3, #32
 8005678:	6023      	strmi	r3, [r4, #0]
 800567a:	b11d      	cbz	r5, 8005684 <_printf_i+0x19c>
 800567c:	2310      	movs	r3, #16
 800567e:	e7ad      	b.n	80055dc <_printf_i+0xf4>
 8005680:	4826      	ldr	r0, [pc, #152]	@ (800571c <_printf_i+0x234>)
 8005682:	e7e9      	b.n	8005658 <_printf_i+0x170>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	f023 0320 	bic.w	r3, r3, #32
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	e7f6      	b.n	800567c <_printf_i+0x194>
 800568e:	4616      	mov	r6, r2
 8005690:	e7bd      	b.n	800560e <_printf_i+0x126>
 8005692:	6833      	ldr	r3, [r6, #0]
 8005694:	6825      	ldr	r5, [r4, #0]
 8005696:	6961      	ldr	r1, [r4, #20]
 8005698:	1d18      	adds	r0, r3, #4
 800569a:	6030      	str	r0, [r6, #0]
 800569c:	062e      	lsls	r6, r5, #24
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	d501      	bpl.n	80056a6 <_printf_i+0x1be>
 80056a2:	6019      	str	r1, [r3, #0]
 80056a4:	e002      	b.n	80056ac <_printf_i+0x1c4>
 80056a6:	0668      	lsls	r0, r5, #25
 80056a8:	d5fb      	bpl.n	80056a2 <_printf_i+0x1ba>
 80056aa:	8019      	strh	r1, [r3, #0]
 80056ac:	2300      	movs	r3, #0
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	4616      	mov	r6, r2
 80056b2:	e7bc      	b.n	800562e <_printf_i+0x146>
 80056b4:	6833      	ldr	r3, [r6, #0]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	6032      	str	r2, [r6, #0]
 80056ba:	681e      	ldr	r6, [r3, #0]
 80056bc:	6862      	ldr	r2, [r4, #4]
 80056be:	2100      	movs	r1, #0
 80056c0:	4630      	mov	r0, r6
 80056c2:	f7fa fd8d 	bl	80001e0 <memchr>
 80056c6:	b108      	cbz	r0, 80056cc <_printf_i+0x1e4>
 80056c8:	1b80      	subs	r0, r0, r6
 80056ca:	6060      	str	r0, [r4, #4]
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	2300      	movs	r3, #0
 80056d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d6:	e7aa      	b.n	800562e <_printf_i+0x146>
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	4632      	mov	r2, r6
 80056dc:	4649      	mov	r1, r9
 80056de:	4640      	mov	r0, r8
 80056e0:	47d0      	blx	sl
 80056e2:	3001      	adds	r0, #1
 80056e4:	d0ad      	beq.n	8005642 <_printf_i+0x15a>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	079b      	lsls	r3, r3, #30
 80056ea:	d413      	bmi.n	8005714 <_printf_i+0x22c>
 80056ec:	68e0      	ldr	r0, [r4, #12]
 80056ee:	9b03      	ldr	r3, [sp, #12]
 80056f0:	4298      	cmp	r0, r3
 80056f2:	bfb8      	it	lt
 80056f4:	4618      	movlt	r0, r3
 80056f6:	e7a6      	b.n	8005646 <_printf_i+0x15e>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4632      	mov	r2, r6
 80056fc:	4649      	mov	r1, r9
 80056fe:	4640      	mov	r0, r8
 8005700:	47d0      	blx	sl
 8005702:	3001      	adds	r0, #1
 8005704:	d09d      	beq.n	8005642 <_printf_i+0x15a>
 8005706:	3501      	adds	r5, #1
 8005708:	68e3      	ldr	r3, [r4, #12]
 800570a:	9903      	ldr	r1, [sp, #12]
 800570c:	1a5b      	subs	r3, r3, r1
 800570e:	42ab      	cmp	r3, r5
 8005710:	dcf2      	bgt.n	80056f8 <_printf_i+0x210>
 8005712:	e7eb      	b.n	80056ec <_printf_i+0x204>
 8005714:	2500      	movs	r5, #0
 8005716:	f104 0619 	add.w	r6, r4, #25
 800571a:	e7f5      	b.n	8005708 <_printf_i+0x220>
 800571c:	08005ac8 	.word	0x08005ac8
 8005720:	08005ad9 	.word	0x08005ad9

08005724 <__swbuf_r>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	460e      	mov	r6, r1
 8005728:	4614      	mov	r4, r2
 800572a:	4605      	mov	r5, r0
 800572c:	b118      	cbz	r0, 8005736 <__swbuf_r+0x12>
 800572e:	6a03      	ldr	r3, [r0, #32]
 8005730:	b90b      	cbnz	r3, 8005736 <__swbuf_r+0x12>
 8005732:	f7ff fa41 	bl	8004bb8 <__sinit>
 8005736:	69a3      	ldr	r3, [r4, #24]
 8005738:	60a3      	str	r3, [r4, #8]
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	071a      	lsls	r2, r3, #28
 800573e:	d501      	bpl.n	8005744 <__swbuf_r+0x20>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	b943      	cbnz	r3, 8005756 <__swbuf_r+0x32>
 8005744:	4621      	mov	r1, r4
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f82a 	bl	80057a0 <__swsetup_r>
 800574c:	b118      	cbz	r0, 8005756 <__swbuf_r+0x32>
 800574e:	f04f 37ff 	mov.w	r7, #4294967295
 8005752:	4638      	mov	r0, r7
 8005754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	6922      	ldr	r2, [r4, #16]
 800575a:	1a98      	subs	r0, r3, r2
 800575c:	6963      	ldr	r3, [r4, #20]
 800575e:	b2f6      	uxtb	r6, r6
 8005760:	4283      	cmp	r3, r0
 8005762:	4637      	mov	r7, r6
 8005764:	dc05      	bgt.n	8005772 <__swbuf_r+0x4e>
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f7ff fcbd 	bl	80050e8 <_fflush_r>
 800576e:	2800      	cmp	r0, #0
 8005770:	d1ed      	bne.n	800574e <__swbuf_r+0x2a>
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	3b01      	subs	r3, #1
 8005776:	60a3      	str	r3, [r4, #8]
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	6022      	str	r2, [r4, #0]
 800577e:	701e      	strb	r6, [r3, #0]
 8005780:	6962      	ldr	r2, [r4, #20]
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	429a      	cmp	r2, r3
 8005786:	d004      	beq.n	8005792 <__swbuf_r+0x6e>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	07db      	lsls	r3, r3, #31
 800578c:	d5e1      	bpl.n	8005752 <__swbuf_r+0x2e>
 800578e:	2e0a      	cmp	r6, #10
 8005790:	d1df      	bne.n	8005752 <__swbuf_r+0x2e>
 8005792:	4621      	mov	r1, r4
 8005794:	4628      	mov	r0, r5
 8005796:	f7ff fca7 	bl	80050e8 <_fflush_r>
 800579a:	2800      	cmp	r0, #0
 800579c:	d0d9      	beq.n	8005752 <__swbuf_r+0x2e>
 800579e:	e7d6      	b.n	800574e <__swbuf_r+0x2a>

080057a0 <__swsetup_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4b29      	ldr	r3, [pc, #164]	@ (8005848 <__swsetup_r+0xa8>)
 80057a4:	4605      	mov	r5, r0
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	460c      	mov	r4, r1
 80057aa:	b118      	cbz	r0, 80057b4 <__swsetup_r+0x14>
 80057ac:	6a03      	ldr	r3, [r0, #32]
 80057ae:	b90b      	cbnz	r3, 80057b4 <__swsetup_r+0x14>
 80057b0:	f7ff fa02 	bl	8004bb8 <__sinit>
 80057b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b8:	0719      	lsls	r1, r3, #28
 80057ba:	d422      	bmi.n	8005802 <__swsetup_r+0x62>
 80057bc:	06da      	lsls	r2, r3, #27
 80057be:	d407      	bmi.n	80057d0 <__swsetup_r+0x30>
 80057c0:	2209      	movs	r2, #9
 80057c2:	602a      	str	r2, [r5, #0]
 80057c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	f04f 30ff 	mov.w	r0, #4294967295
 80057ce:	e033      	b.n	8005838 <__swsetup_r+0x98>
 80057d0:	0758      	lsls	r0, r3, #29
 80057d2:	d512      	bpl.n	80057fa <__swsetup_r+0x5a>
 80057d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057d6:	b141      	cbz	r1, 80057ea <__swsetup_r+0x4a>
 80057d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057dc:	4299      	cmp	r1, r3
 80057de:	d002      	beq.n	80057e6 <__swsetup_r+0x46>
 80057e0:	4628      	mov	r0, r5
 80057e2:	f7ff fafd 	bl	8004de0 <_free_r>
 80057e6:	2300      	movs	r3, #0
 80057e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	2300      	movs	r3, #0
 80057f4:	6063      	str	r3, [r4, #4]
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f043 0308 	orr.w	r3, r3, #8
 8005800:	81a3      	strh	r3, [r4, #12]
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	b94b      	cbnz	r3, 800581a <__swsetup_r+0x7a>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800580c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005810:	d003      	beq.n	800581a <__swsetup_r+0x7a>
 8005812:	4621      	mov	r1, r4
 8005814:	4628      	mov	r0, r5
 8005816:	f000 f883 	bl	8005920 <__smakebuf_r>
 800581a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581e:	f013 0201 	ands.w	r2, r3, #1
 8005822:	d00a      	beq.n	800583a <__swsetup_r+0x9a>
 8005824:	2200      	movs	r2, #0
 8005826:	60a2      	str	r2, [r4, #8]
 8005828:	6962      	ldr	r2, [r4, #20]
 800582a:	4252      	negs	r2, r2
 800582c:	61a2      	str	r2, [r4, #24]
 800582e:	6922      	ldr	r2, [r4, #16]
 8005830:	b942      	cbnz	r2, 8005844 <__swsetup_r+0xa4>
 8005832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005836:	d1c5      	bne.n	80057c4 <__swsetup_r+0x24>
 8005838:	bd38      	pop	{r3, r4, r5, pc}
 800583a:	0799      	lsls	r1, r3, #30
 800583c:	bf58      	it	pl
 800583e:	6962      	ldrpl	r2, [r4, #20]
 8005840:	60a2      	str	r2, [r4, #8]
 8005842:	e7f4      	b.n	800582e <__swsetup_r+0x8e>
 8005844:	2000      	movs	r0, #0
 8005846:	e7f7      	b.n	8005838 <__swsetup_r+0x98>
 8005848:	20000018 	.word	0x20000018

0800584c <_raise_r>:
 800584c:	291f      	cmp	r1, #31
 800584e:	b538      	push	{r3, r4, r5, lr}
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	d904      	bls.n	8005860 <_raise_r+0x14>
 8005856:	2316      	movs	r3, #22
 8005858:	6003      	str	r3, [r0, #0]
 800585a:	f04f 30ff 	mov.w	r0, #4294967295
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005862:	b112      	cbz	r2, 800586a <_raise_r+0x1e>
 8005864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005868:	b94b      	cbnz	r3, 800587e <_raise_r+0x32>
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f830 	bl	80058d0 <_getpid_r>
 8005870:	4622      	mov	r2, r4
 8005872:	4601      	mov	r1, r0
 8005874:	4628      	mov	r0, r5
 8005876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800587a:	f000 b817 	b.w	80058ac <_kill_r>
 800587e:	2b01      	cmp	r3, #1
 8005880:	d00a      	beq.n	8005898 <_raise_r+0x4c>
 8005882:	1c59      	adds	r1, r3, #1
 8005884:	d103      	bne.n	800588e <_raise_r+0x42>
 8005886:	2316      	movs	r3, #22
 8005888:	6003      	str	r3, [r0, #0]
 800588a:	2001      	movs	r0, #1
 800588c:	e7e7      	b.n	800585e <_raise_r+0x12>
 800588e:	2100      	movs	r1, #0
 8005890:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005894:	4620      	mov	r0, r4
 8005896:	4798      	blx	r3
 8005898:	2000      	movs	r0, #0
 800589a:	e7e0      	b.n	800585e <_raise_r+0x12>

0800589c <raise>:
 800589c:	4b02      	ldr	r3, [pc, #8]	@ (80058a8 <raise+0xc>)
 800589e:	4601      	mov	r1, r0
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	f7ff bfd3 	b.w	800584c <_raise_r>
 80058a6:	bf00      	nop
 80058a8:	20000018 	.word	0x20000018

080058ac <_kill_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d07      	ldr	r5, [pc, #28]	@ (80058cc <_kill_r+0x20>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4604      	mov	r4, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	f7fb fcc1 	bl	8001240 <_kill>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d102      	bne.n	80058c8 <_kill_r+0x1c>
 80058c2:	682b      	ldr	r3, [r5, #0]
 80058c4:	b103      	cbz	r3, 80058c8 <_kill_r+0x1c>
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
 80058ca:	bf00      	nop
 80058cc:	200002b8 	.word	0x200002b8

080058d0 <_getpid_r>:
 80058d0:	f7fb bcae 	b.w	8001230 <_getpid>

080058d4 <__swhatbuf_r>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	460c      	mov	r4, r1
 80058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058dc:	2900      	cmp	r1, #0
 80058de:	b096      	sub	sp, #88	@ 0x58
 80058e0:	4615      	mov	r5, r2
 80058e2:	461e      	mov	r6, r3
 80058e4:	da0d      	bge.n	8005902 <__swhatbuf_r+0x2e>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	bf14      	ite	ne
 80058f2:	2340      	movne	r3, #64	@ 0x40
 80058f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058f8:	2000      	movs	r0, #0
 80058fa:	6031      	str	r1, [r6, #0]
 80058fc:	602b      	str	r3, [r5, #0]
 80058fe:	b016      	add	sp, #88	@ 0x58
 8005900:	bd70      	pop	{r4, r5, r6, pc}
 8005902:	466a      	mov	r2, sp
 8005904:	f000 f848 	bl	8005998 <_fstat_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	dbec      	blt.n	80058e6 <__swhatbuf_r+0x12>
 800590c:	9901      	ldr	r1, [sp, #4]
 800590e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005916:	4259      	negs	r1, r3
 8005918:	4159      	adcs	r1, r3
 800591a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800591e:	e7eb      	b.n	80058f8 <__swhatbuf_r+0x24>

08005920 <__smakebuf_r>:
 8005920:	898b      	ldrh	r3, [r1, #12]
 8005922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005924:	079d      	lsls	r5, r3, #30
 8005926:	4606      	mov	r6, r0
 8005928:	460c      	mov	r4, r1
 800592a:	d507      	bpl.n	800593c <__smakebuf_r+0x1c>
 800592c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	2301      	movs	r3, #1
 8005936:	6163      	str	r3, [r4, #20]
 8005938:	b003      	add	sp, #12
 800593a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800593c:	ab01      	add	r3, sp, #4
 800593e:	466a      	mov	r2, sp
 8005940:	f7ff ffc8 	bl	80058d4 <__swhatbuf_r>
 8005944:	9f00      	ldr	r7, [sp, #0]
 8005946:	4605      	mov	r5, r0
 8005948:	4639      	mov	r1, r7
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff fabc 	bl	8004ec8 <_malloc_r>
 8005950:	b948      	cbnz	r0, 8005966 <__smakebuf_r+0x46>
 8005952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005956:	059a      	lsls	r2, r3, #22
 8005958:	d4ee      	bmi.n	8005938 <__smakebuf_r+0x18>
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	e7e2      	b.n	800592c <__smakebuf_r+0xc>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	6020      	str	r0, [r4, #0]
 800596a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005976:	b15b      	cbz	r3, 8005990 <__smakebuf_r+0x70>
 8005978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f81d 	bl	80059bc <_isatty_r>
 8005982:	b128      	cbz	r0, 8005990 <__smakebuf_r+0x70>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	431d      	orrs	r5, r3
 8005994:	81a5      	strh	r5, [r4, #12]
 8005996:	e7cf      	b.n	8005938 <__smakebuf_r+0x18>

08005998 <_fstat_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d07      	ldr	r5, [pc, #28]	@ (80059b8 <_fstat_r+0x20>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	4611      	mov	r1, r2
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	f7fb fcab 	bl	8001300 <_fstat>
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	d102      	bne.n	80059b4 <_fstat_r+0x1c>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	b103      	cbz	r3, 80059b4 <_fstat_r+0x1c>
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	bd38      	pop	{r3, r4, r5, pc}
 80059b6:	bf00      	nop
 80059b8:	200002b8 	.word	0x200002b8

080059bc <_isatty_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d06      	ldr	r5, [pc, #24]	@ (80059d8 <_isatty_r+0x1c>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fb fcaa 	bl	8001320 <_isatty>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_isatty_r+0x1a>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_isatty_r+0x1a>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	200002b8 	.word	0x200002b8

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
